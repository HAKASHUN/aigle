(function(e) {
  if ('object' == typeof exports && 'undefined' != typeof module) module.exports = e();
  else if ('function' == typeof define && define.amd) define([], e);
  else {
    var t;
    (t =
      'undefined' == typeof window
        ? 'undefined' == typeof global
          ? 'undefined' == typeof self
            ? this
            : self
          : global
        : window),
      (t.Promise = e());
  }
})(function() {
  return (function() {
    function l(s, e, r) {
      function t(_, i) {
        if (!e[_]) {
          if (!s[_]) {
            var n = 'function' == typeof require && require;
            if (!i && n) return n(_, !0);
            if (o) return o(_, !0);
            var c = new Error("Cannot find module '" + _ + "'");
            throw ((c.code = 'MODULE_NOT_FOUND'), c);
          }
          var a = (e[_] = { exports: {} });
          s[_][0].call(
            a.exports,
            function(e) {
              var r = s[_][1][e];
              return t(r || e);
            },
            a,
            a.exports,
            l,
            s,
            e,
            r
          );
        }
        return e[_].exports;
      }
      for (var o = 'function' == typeof require && require, _ = 0; _ < r.length; _++) t(r[_]);
      return t;
    }
    return l;
  })()(
    {
      1: [
        function(e, t) {
          'use strict';
          e('setimmediate'), (t.exports = e('./lib/aigle'));
        },
        { './lib/aigle': 2, setimmediate: 84 }
      ],
      2: [
        function(e, t) {
          (function(r) {
            'use strict';
            function l(e) {
              if (e instanceof u) return e;
              const t = new E(h);
              return R(t, e), t;
            }
            function i(t) {
              j && Xt(this);
              try {
                t(
                  e => {
                    void 0 === t || ((t = void 0), R(this, e));
                  },
                  e => {
                    void 0 === t || ((t = void 0), this._reject(e));
                  }
                );
              } catch (r) {
                if (t === void 0) return;
                (t = void 0), this._reject(r);
              }
            }
            function s(t) {
              j && Xt(this);
              try {
                t(
                  e => {
                    void 0 === t ||
                      (e instanceof E && 0 === e._resolved && (this._parent = e), (t = void 0), R(this, e));
                  },
                  e => {
                    void 0 === t || ((t = void 0), this._reject(e));
                  },
                  e => {
                    if ('function' != typeof e) throw new TypeError('onCancel must be function');
                    0 !== this._resolved ||
                      (void 0 === this._onCancelQueue && (this._onCancelQueue = new m()), this._onCancelQueue.push(e));
                  }
                );
              } catch (r) {
                if (t === void 0) return;
                (t = void 0), this._reject(r);
              }
            }
            function o(e, t) {
              return r => {
                for (let i = e.length; i--; ) {
                  const l = e[i];
                  if (l === Error || l.prototype instanceof Error) {
                    if (r instanceof l) return t(r);
                  } else if (l(r)) return t(r);
                }
                return (g.e = r), g;
              };
            }
            function _(e, t) {
              return () => {
                const { _resolved: r, _value: l } = e,
                  i = S(t);
                if (i === g) return i;
                if (i instanceof u)
                  switch (i._resolved) {
                    case 1:
                      return (i._value = l), i;
                    case 2:
                      return i;
                  }
                const s = new E(h);
                return (
                  i && i.then
                    ? 1 === r
                      ? i.then(() => s._resolve(l), e => s._reject(e))
                      : i.then(() => s._reject(l), e => s._reject(e))
                    : ((s._resolved = r), (s._value = l)),
                  s
                );
              };
            }
            function a(e, t, r, l) {
              return (
                j && Xt(t, e),
                void 0 === e._receiver || e._receiver === h
                  ? (0 !== e._resolved && y(e), (e._receiver = t), (e._onFulfilled = r), (e._onRejected = l))
                  : e._receiver === x
                    ? ((e._receiver = t), (e._onFulfilled = r), (e._onRejected = l))
                    : (!e._receivers && (e._receivers = new m()),
                      e._receivers.push({ receiver: t, onFulfilled: r, onRejected: l })),
                t
              );
            }
            function c(e, t) {
              return j && Xt(t, e), 0 !== e._resolved && y(e), (e._receiver = t), t._promise;
            }
            function n(e, t, r, l, i) {
              if (j) {
                j = !1;
                const s = n(e, t, r, l, i);
                return (j = !0), Xt(s, e), s;
              }
              switch (e._resolved) {
                case 0:
                  const s = new t(v, r, l, i);
                  return (
                    void 0 === e._receiver
                      ? (e._receiver = s)
                      : (!e._receivers && (e._receivers = new m()), e._receivers.push({ receiver: s })),
                    s._promise
                  );
                case 1:
                  return new t(e._value, r, l, i)._execute();
                case 2:
                  return E.reject(e._value);
              }
            }
            const { AigleCore: u, AigleProxy: p } = e('aigle-core'),
              m = e('./internal/queue'),
              y = e('./internal/async'),
              {
                VERSION: d,
                INTERNAL: h,
                PENDING: v,
                UNHANDLED: x,
                errorObj: g,
                call0: S,
                callResolve: k,
                callReject: f,
                callReceiver: R,
                printWarning: L
              } = e('./internal/util');
            let j = !1;
            class E extends u {
              constructor(e) {
                super(),
                  (this._resolved = 0),
                  (this._value = void 0),
                  (this._key = void 0),
                  (this._receiver = void 0),
                  (this._onFulfilled = void 0),
                  (this._onRejected = void 0),
                  (this._receivers = void 0);
                e === h || this._execute(e);
              }
              then(e, t) {
                return a(this, new E(h), e, t);
              }
              catch(e) {
                if (1 < arguments.length) {
                  let t = arguments.length;
                  if (((e = arguments[--t]), 'function' == typeof e)) {
                    const r = Array(t);
                    for (; t--; ) r[t] = arguments[t];
                    e = o(r, e);
                  }
                }
                return a(this, new E(h), void 0, e);
              }
              finally(e) {
                return (e = 'function' == typeof e ? _(this, e) : e), a(this, new E(h), e, e);
              }
              toString() {
                return '[object Promise]';
              }
              isPending() {
                return 0 === this._resolved;
              }
              isFulfilled() {
                return 1 === this._resolved;
              }
              isRejected() {
                return 2 === this._resolved;
              }
              isCancelled() {
                return this._value instanceof tr;
              }
              value() {
                return 1 === this._resolved ? this._value : void 0;
              }
              reason() {
                return 2 === this._resolved ? this._value : void 0;
              }
              cancel() {
                if (this._execute !== i && 0 === this._resolved) {
                  const { _onCancelQueue: e } = this;
                  if (e) {
                    let t = -1;
                    const { array: r } = e;
                    for (this._onCancelQueue = void 0; ++t < e.length; ) r[t]();
                  }
                  (this._resolved = 2),
                    (this._value = new tr('late cancellation observer')),
                    this._parent && this._parent.cancel();
                }
              }
              suppressUnhandledRejections() {
                this._receiver = h;
              }
              spread(e) {
                return c(this, new Bt(e));
              }
              all() {
                return n(this, b);
              }
              race() {
                return n(this, B);
              }
              props() {
                return n(this, T);
              }
              parallel() {
                return n(this, z);
              }
              each(e) {
                return n(this, F, e);
              }
              forEach(e) {
                return n(this, F, e);
              }
              eachSeries(e) {
                return n(this, W, e);
              }
              forEachSeries(e) {
                return n(this, W, e);
              }
              eachLimit(e, t) {
                return n(this, V, e, t);
              }
              forEachLimit(e, t) {
                return n(this, V, e, t);
              }
              map(e) {
                return n(this, G, e);
              }
              mapSeries(e) {
                return n(this, K, e);
              }
              mapLimit(e, t) {
                return n(this, Q, e, t);
              }
              mapValues(e) {
                return n(this, J, e);
              }
              mapValuesSeries(e) {
                return n(this, Y, e);
              }
              mapValuesLimit(e, t) {
                return n(this, Z, e, t);
              }
              filter(e) {
                return n(this, te, e);
              }
              filterSeries(e) {
                return n(this, le, e);
              }
              filterLimit(e, t) {
                return n(this, se, e, t);
              }
              reject(e) {
                return n(this, _e, e);
              }
              rejectSeries(e) {
                return n(this, ce, e);
              }
              rejectLimit(e, t) {
                return n(this, ue, e, t);
              }
              find(e) {
                return n(this, me, e);
              }
              findSeries(e) {
                return n(this, de, e);
              }
              findLimit(e, t) {
                return n(this, ve, e, t);
              }
              findIndex(e) {
                return n(this, ge, e);
              }
              findIndexSeries(e) {
                return n(this, ke, e);
              }
              findIndexLimit(e, t) {
                return n(this, Re, e, t);
              }
              findKey(e) {
                return n(this, je, e);
              }
              findKeySeries(e) {
                return n(this, Ae, e);
              }
              findKeyLimit(e, t) {
                return n(this, Ne, e, t);
              }
              pick(e, ...t) {
                return n(this, Be, e, t);
              }
              pickSeries(e) {
                return this.pickBySeries(e);
              }
              pickLimit(e, t) {
                return this.pickByLimit(e, t);
              }
              pickBy(e) {
                return n(this, Te, e);
              }
              pickBySeries(e) {
                return n(this, ze, e);
              }
              pickByLimit(e, t) {
                return n(this, Fe, e, t);
              }
              omit(e, ...t) {
                return n(this, We, e, t);
              }
              omitSeries(e) {
                return this.omitBySeries(e);
              }
              omitLimit(e, t) {
                return this.omitByLimit(e, t);
              }
              omitBy(e) {
                return n(this, Ve, e);
              }
              omitBySeries(e) {
                return n(this, Ge, e);
              }
              omitByLimit(e, t) {
                return n(this, Ke, e, t);
              }
              reduce(e, t) {
                return n(this, Qe, e, t);
              }
              transform(e, t) {
                return n(this, Je, e, t);
              }
              transformSeries(e, t) {
                return n(this, Ye, e, t);
              }
              transformLimit(e, t, r) {
                return n(this, Ze, e, t, r);
              }
              sortBy(e) {
                return n(this, tt, e);
              }
              sortBySeries(e) {
                return n(this, lt, e);
              }
              sortByLimit(e, t) {
                return n(this, st, e, t);
              }
              some(e) {
                return n(this, _t, e);
              }
              someSeries(e) {
                return n(this, ct, e);
              }
              someLimit(e, t) {
                return n(this, ut, e, t);
              }
              every(e) {
                return n(this, mt, e);
              }
              everySeries(e) {
                return n(this, dt, e);
              }
              everyLimit(e, t) {
                return n(this, vt, e, t);
              }
              concat(e) {
                return n(this, gt, e);
              }
              concatSeries(e) {
                return n(this, kt, e);
              }
              concatLimit(e, t) {
                return n(this, Rt, e, t);
              }
              groupBy(e) {
                return n(this, jt, e);
              }
              groupBySeries(e) {
                return n(this, At, e);
              }
              groupByLimit(e, t) {
                return n(this, Nt, e, t);
              }
              delay(e) {
                return a(this, new zt(e));
              }
              timeout(e, t) {
                return c(this, new Dt(e, t));
              }
              whilst(e, t) {
                return this.then(r => Ft(r, e, t));
              }
              doWhilst(e, t) {
                return this.then(r => wt(r, e, t));
              }
              until(e, t) {
                return this.then(r => Wt(r, e, t));
              }
              doUntil(e, t) {
                return this.then(r => Mt(r, e, t));
              }
              thru(e) {
                return this.then(t => Ct(t, e));
              }
              tap(e) {
                return this.then(t => Gt(t, e));
              }
              times(e) {
                return n(this, Kt, e);
              }
              timesSeries(e) {
                return n(this, Qt, e);
              }
              timesLimit(e, t) {
                return n(this, Jt, e, t);
              }
              disposer(e) {
                return new Yt(this, e);
              }
              _resolve(e) {
                0 === this._resolved &&
                  ((this._resolved = 1), (this._value = e), void 0 === this._receiver || this._callResolve());
              }
              _callResolve() {
                const { _receiver: e } = this;
                if (
                  ((this._receiver = void 0),
                  e instanceof p
                    ? e._callResolve(this._value, this._key)
                    : this._key === h
                      ? e._resolve(this._value)
                      : k(e, this._onFulfilled, this._value),
                  !!this._receivers)
                ) {
                  const { _value: e, _key: t, _receivers: r } = this;
                  this._receivers = void 0;
                  let l = -1;
                  const { array: i } = r;
                  for (; ++l < r.length; ) {
                    const { receiver: r, onFulfilled: s } = i[l];
                    r instanceof p ? r._callResolve(e, t) : k(r, s, e);
                  }
                }
              }
              _reject(e) {
                if (0 === this._resolved)
                  return (
                    (this._resolved = 2),
                    (this._value = e),
                    void 0 === this._receiver
                      ? ((this._receiver = x), void y(this))
                      : void (j && Zt(this), this._callReject())
                  );
              }
              _callReject() {
                const { _receiver: e } = this;
                if (((this._receiver = void 0), void 0 === e || e === x))
                  return L(this._value), void r.emit('unhandledRejection', this._value);
                if (
                  e !== h &&
                  (e instanceof p
                    ? e._callReject(this._value)
                    : this._key === h
                      ? e._reject(this._value)
                      : f(e, this._onRejected, this._value),
                  !!this._receivers)
                ) {
                  const { _value: e, _receivers: t } = this;
                  this._receivers = void 0;
                  let r = -1;
                  const { array: l } = t;
                  for (; ++r < t.length; ) {
                    const { receiver: t, onRejected: i } = l[r];
                    t instanceof p ? t._callReject(e) : f(t, i, e);
                  }
                }
              }
              _addReceiver(e, t) {
                (this._key = t), (this._receiver = e);
              }
            }
            (E.prototype._execute = i), (t.exports = E), (t.exports.default = E);
            const { all: A, All: b } = e('./all'),
              N = e('./attempt'),
              { race: P, Race: B } = e('./race'),
              { props: I, Props: T } = e('./props'),
              { parallel: O, Parallel: z } = e('./parallel'),
              { each: D, Each: F } = e('./each'),
              { eachSeries: w, EachSeries: W } = e('./eachSeries'),
              { eachLimit: M, EachLimit: V } = e('./eachLimit'),
              { map: C, Map: G } = e('./map'),
              { mapSeries: U, MapSeries: K } = e('./mapSeries'),
              { mapLimit: H, MapLimit: Q } = e('./mapLimit'),
              { mapValues: q, MapValues: J } = e('./mapValues'),
              { mapValuesSeries: $, MapValuesSeries: Y } = e('./mapValuesSeries'),
              { mapValuesLimit: X, MapValuesLimit: Z } = e('./mapValuesLimit'),
              { filter: ee, Filter: te } = e('./filter'),
              { filterSeries: re, FilterSeries: le } = e('./filterSeries'),
              { filterLimit: ie, FilterLimit: se } = e('./filterLimit'),
              { reject: oe, Reject: _e } = e('./reject'),
              { rejectSeries: ae, RejectSeries: ce } = e('./rejectSeries'),
              { rejectLimit: ne, RejectLimit: ue } = e('./rejectLimit'),
              { find: pe, Find: me } = e('./find'),
              { findSeries: ye, FindSeries: de } = e('./findSeries'),
              { findLimit: he, FindLimit: ve } = e('./findLimit'),
              { findIndex: xe, FindIndex: ge } = e('./findIndex'),
              { findIndexSeries: Se, FindIndexSeries: ke } = e('./findIndexSeries'),
              { findIndexLimit: fe, FindIndexLimit: Re } = e('./findIndexLimit'),
              { findKey: Le, FindKey: je } = e('./findKey'),
              { findKeySeries: Ee, FindKeySeries: Ae } = e('./findKeySeries'),
              { findKeyLimit: be, FindKeyLimit: Ne } = e('./findKeyLimit'),
              { pick: Pe, Pick: Be } = e('./pick'),
              { pickBy: Ie, PickBy: Te } = e('./pickBy'),
              { pickBySeries: Oe, PickBySeries: ze } = e('./pickBySeries'),
              { pickByLimit: De, PickByLimit: Fe } = e('./pickByLimit'),
              { omit: we, Omit: We } = e('./omit'),
              { omitBy: Me, OmitBy: Ve } = e('./omitBy'),
              { omitBySeries: Ce, OmitBySeries: Ge } = e('./omitBySeries'),
              { omitByLimit: Ue, OmitByLimit: Ke } = e('./omitByLimit'),
              { reduce: He, Reduce: Qe } = e('./reduce'),
              { transform: qe, Transform: Je } = e('./transform'),
              { transformSeries: $e, TransformSeries: Ye } = e('./transformSeries'),
              { transformLimit: Xe, TransformLimit: Ze } = e('./transformLimit'),
              { sortBy: et, SortBy: tt } = e('./sortBy'),
              { sortBySeries: rt, SortBySeries: lt } = e('./sortBySeries'),
              { sortByLimit: it, SortByLimit: st } = e('./sortByLimit'),
              { some: ot, Some: _t } = e('./some'),
              { someSeries: at, SomeSeries: ct } = e('./someSeries'),
              { someLimit: nt, SomeLimit: ut } = e('./someLimit'),
              { every: pt, Every: mt } = e('./every'),
              { everySeries: yt, EverySeries: dt } = e('./everySeries'),
              { everyLimit: ht, EveryLimit: vt } = e('./everyLimit'),
              { concat: xt, Concat: gt } = e('./concat'),
              { concatSeries: St, ConcatSeries: kt } = e('./concatSeries'),
              { concatLimit: ft, ConcatLimit: Rt } = e('./concatLimit'),
              { groupBy: Lt, GroupBy: jt } = e('./groupBy'),
              { groupBySeries: Et, GroupBySeries: At } = e('./groupBySeries'),
              { groupByLimit: bt, GroupByLimit: Nt } = e('./groupByLimit'),
              { join: Pt, Spread: Bt } = e('./join'),
              It = e('./promisify'),
              Tt = e('./promisifyAll'),
              { delay: Ot, Delay: zt } = e('./delay'),
              Dt = e('./timeout'),
              { whilst: Ft } = e('./whilst'),
              { doWhilst: wt } = e('./doWhilst'),
              { until: Wt } = e('./until'),
              Mt = e('./doUntil'),
              Vt = e('./retry'),
              Ct = e('./thru'),
              Gt = e('./tap'),
              { times: Ut, Times: Kt } = e('./times'),
              { timesSeries: Ht, TimesSeries: Qt } = e('./timesSeries'),
              { timesLimit: qt, TimesLimit: Jt } = e('./timesLimit'),
              { using: $t, Disposer: Yt } = e('./using'),
              { resolveStack: Xt, reconstructStack: Zt } = e('./debug'),
              { createProxy: er } = e('./internal/mixin');
            (E.VERSION = d),
              (E.resolve = l),
              (E.reject = function(e, t) {
                if (2 === arguments.length && 'function' == typeof t) return oe(e, t);
                const r = new E(h);
                return r._reject(e), r;
              }),
              (E.all = A),
              (E.race = P),
              (E.props = I),
              (E.parallel = O),
              (E.each = D),
              (E.eachSeries = w),
              (E.eachLimit = M),
              (E.forEach = D),
              (E.forEachSeries = w),
              (E.forEachLimit = M),
              (E.map = C),
              (E.mapSeries = U),
              (E.mapLimit = H),
              (E.mapValues = q),
              (E.mapValuesSeries = $),
              (E.mapValuesLimit = X),
              (E.filter = ee),
              (E.filterSeries = re),
              (E.filterLimit = ie),
              (E.rejectSeries = ae),
              (E.rejectLimit = ne),
              (E.find = pe),
              (E.findSeries = ye),
              (E.findLimit = he),
              (E.findIndex = xe),
              (E.findIndexSeries = Se),
              (E.findIndexLimit = fe),
              (E.findKey = Le),
              (E.findKeySeries = Ee),
              (E.findKeyLimit = be),
              (E.detect = pe),
              (E.detectSeries = ye),
              (E.detectLimit = he),
              (E.pick = Pe),
              (E.pickSeries = Oe),
              (E.pickLimit = De),
              (E.pickBy = Ie),
              (E.pickBySeries = Oe),
              (E.pickByLimit = De),
              (E.omit = we),
              (E.omitSeries = Ce),
              (E.omitLimit = Ue),
              (E.omitBy = Me),
              (E.omitBySeries = Ce),
              (E.omitByLimit = Ue),
              (E.reduce = He),
              (E.transform = qe),
              (E.transformSeries = $e),
              (E.transformLimit = Xe),
              (E.sortBy = et),
              (E.sortBySeries = rt),
              (E.sortByLimit = it),
              (E.some = ot),
              (E.someSeries = at),
              (E.someLimit = nt),
              (E.every = pt),
              (E.everySeries = yt),
              (E.everyLimit = ht),
              (E.concat = xt),
              (E.concatSeries = St),
              (E.concatLimit = ft),
              (E.groupBy = Lt),
              (E.groupBySeries = Et),
              (E.groupByLimit = bt),
              (E.attempt = N),
              (E.try = N),
              (E.join = Pt),
              (E.promisify = It),
              (E.promisifyAll = Tt),
              (E.delay = Ot),
              (E.whilst = Ft),
              (E.doWhilst = wt),
              (E.until = Wt),
              (E.doUntil = Mt),
              (E.retry = Vt),
              (E.thru = Ct),
              (E.tap = Gt),
              (E.times = Ut),
              (E.timesSeries = Ht),
              (E.timesLimit = qt),
              (E.using = $t),
              (E.mixin = function(e, t = {}) {
                const { override: r, promisify: i = !0 } = t;
                return (
                  Object.getOwnPropertyNames(e).forEach(t => {
                    const s = e[t];
                    if ('function' != typeof s || (E[t] && !r)) return;
                    if ('chain' === t) {
                      const e = s();
                      if (e && e.__chain__)
                        return (
                          (E.chain = l),
                          void (E.prototype.value = function() {
                            return this;
                          })
                        );
                    }
                    const o = er(s, i);
                    (E[t] = function(e, t, r, l) {
                      return new o(e, t, r, l)._execute();
                    }),
                      (E.prototype[t] = function(e, t, r) {
                        return n(this, o, e, t, r);
                      });
                  }),
                  E
                );
              }),
              (E.config = function(e) {
                (e = e || {}),
                  e.longStackTraces !== void 0 && (j = !!e.longStackTraces),
                  e.cancellation !== void 0 && (E.prototype._execute = e.cancellation ? s : i);
              }),
              (E.longStackTraces = function() {
                j = !0;
              });
            const { CancellationError: tr, TimeoutError: rr } = e('./error');
            (E.CancellationError = tr), (E.TimeoutError = rr);
          }.call(this, e('_process')));
        },
        {
          './all': 3,
          './attempt': 4,
          './concat': 5,
          './concatLimit': 6,
          './concatSeries': 7,
          './debug': 8,
          './delay': 9,
          './doUntil': 10,
          './doWhilst': 11,
          './each': 12,
          './eachLimit': 13,
          './eachSeries': 14,
          './error': 15,
          './every': 16,
          './everyLimit': 17,
          './everySeries': 18,
          './filter': 19,
          './filterLimit': 20,
          './filterSeries': 21,
          './find': 22,
          './findIndex': 23,
          './findIndexLimit': 24,
          './findIndexSeries': 25,
          './findKey': 26,
          './findKeyLimit': 27,
          './findKeySeries': 28,
          './findLimit': 29,
          './findSeries': 30,
          './groupBy': 31,
          './groupByLimit': 32,
          './groupBySeries': 33,
          './internal/async': 34,
          './internal/mixin': 36,
          './internal/queue': 37,
          './internal/util': 38,
          './join': 39,
          './map': 40,
          './mapLimit': 41,
          './mapSeries': 42,
          './mapValues': 43,
          './mapValuesLimit': 44,
          './mapValuesSeries': 45,
          './omit': 46,
          './omitBy': 47,
          './omitByLimit': 48,
          './omitBySeries': 49,
          './parallel': 50,
          './pick': 51,
          './pickBy': 52,
          './pickByLimit': 53,
          './pickBySeries': 54,
          './promisify': 55,
          './promisifyAll': 56,
          './props': 57,
          './race': 58,
          './reduce': 59,
          './reject': 60,
          './rejectLimit': 61,
          './rejectSeries': 62,
          './retry': 63,
          './some': 64,
          './someLimit': 65,
          './someSeries': 66,
          './sortBy': 67,
          './sortByLimit': 68,
          './sortBySeries': 69,
          './tap': 70,
          './thru': 71,
          './timeout': 72,
          './times': 73,
          './timesLimit': 74,
          './timesSeries': 75,
          './transform': 76,
          './transformLimit': 77,
          './transformSeries': 78,
          './until': 79,
          './using': 80,
          './whilst': 81,
          _process: 83,
          'aigle-core': 82
        }
      ],
      3: [
        function(e, t) {
          'use strict';
          const { AigleProxy: r } = e('aigle-core'),
            l = e('./aigle'),
            { INTERNAL: i, PENDING: s, promiseArrayEach: o, promiseSetEach: _ } = e('./internal/util'),
            { callResolve: a } = e('./props');
          class c extends r {
            constructor(e) {
              super(),
                (this._promise = new l(i)),
                (this._rest = void 0),
                (this._coll = void 0),
                (this._result = void 0),
                e === s ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (Array.isArray(e)) {
                const t = e.length;
                (this._rest = t), (this._coll = e), (this._result = Array(t)), (this._callResolve = a), o(this);
              } else if (e instanceof Set) {
                const { size: t } = e;
                (this._rest = t), (this._coll = e), (this._result = Array(t)), (this._callResolve = a), _(this);
              } else (this._rest = 0), (this._result = []);
              return 0 === this._rest && this._promise._resolve(this._result), this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            all: function(e) {
              return new c(e)._promise;
            },
            All: c
          };
        },
        { './aigle': 2, './internal/util': 38, './props': 57, 'aigle-core': 82 }
      ],
      4: [
        function(e, t) {
          'use strict';
          const r = e('./aigle'),
            { INTERNAL: l, callResolve: i } = e('./internal/util');
          t.exports = function(e) {
            const t = new r(l);
            return i(t, e), t;
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      5: [
        function(e, t) {
          'use strict';
          function r(e) {
            return s.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { Each: l } = e('./each'),
            { concatArray: i } = e('./internal/util'),
            { setParallel: s } = e('./internal/collection');
          class o extends l {
            constructor(e, t) {
              super(e, t, r);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest && this._promise._resolve(i(this._result));
            }
          }
          t.exports = {
            concat: function(e, t) {
              return new o(e, t)._execute();
            },
            Concat: o
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      6: [
        function(e, t) {
          'use strict';
          function r(e) {
            return s.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { EachLimit: l } = e('./eachLimit'),
            { concatArray: i } = e('./internal/util'),
            { setLimit: s } = e('./internal/collection');
          class o extends l {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
            _callResolve(e, t) {
              (this._result[t] = e),
                0 == --this._rest ? this._promise._resolve(i(this._result)) : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            concatLimit: function(e, t, r) {
              return new o(e, t, r)._execute();
            },
            ConcatLimit: o
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      7: [
        function(e, t) {
          'use strict';
          const { EachSeries: r } = e('./eachSeries');
          class l extends r {
            constructor(e, t) {
              super(e, t), (this._result = []);
            }
            _callResolve(e) {
              Array.isArray(e) ? this._result.push(...e) : e !== void 0 && this._result.push(e),
                0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
            }
          }
          t.exports = {
            concatSeries: function(e, t) {
              return new l(e, t)._execute();
            },
            ConcatSeries: l
          };
        },
        { './eachSeries': 14 }
      ],
      8: [
        function(e, t) {
          'use strict';
          t.exports = {
            resolveStack: function(e, t) {
              const { stack: r } = new Error();
              (e._stacks = e._stacks || []), t && t._stacks && e._stacks.push(...t._stacks);
              const l = r.split('\n').slice(4);
              e._stacks.push(l.join('\n'));
            },
            reconstructStack: function(e) {
              const { _value: t, _stacks: r } = e;
              if (!1 != t instanceof Error && r && !t._reconstructed) {
                const e = t.stack.split('\n');
                for (let t = r.length; t--; ) e.push('From previous event:'), e.push(r[t]);
                (t.stack = e.join('\n')), (t._reconstructed = !0);
              }
            }
          };
        },
        {}
      ],
      9: [
        function(e, t) {
          'use strict';
          const r = e('./aigle'),
            { INTERNAL: l } = e('./internal/util');
          class i extends r {
            constructor(e) {
              super(l), (this._ms = e), (this._timer = void 0);
            }
            _resolve(e) {
              return (this._timer = setTimeout(() => r.prototype._resolve.call(this, e), this._ms)), this;
            }
            _reject(e) {
              clearTimeout(this._timer), r.prototype._reject.call(this, e);
            }
          }
          t.exports = {
            delay: function(e, t) {
              return new i(e)._resolve(t);
            },
            Delay: i
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      10: [
        function(e, t) {
          'use strict';
          const { DoWhilst: r } = e('./doWhilst'),
            { UntilTester: l } = e('./until');
          t.exports = function(e, t, i) {
            return 'function' != typeof i && ((i = t), (t = e), (e = void 0)), new r(new l(i), t)._iterate(e);
          };
        },
        { './doWhilst': 11, './until': 79 }
      ],
      11: [
        function(e, t) {
          'use strict';
          const { AigleWhilst: r, WhilstTester: l } = e('./whilst');
          class i extends r {
            constructor(e, t) {
              super(e, t);
            }
            _iterate(e) {
              return this._next(e), this._promise;
            }
          }
          t.exports = {
            doWhilst: function(e, t, r) {
              return 'function' != typeof r && ((r = t), (t = e), (e = void 0)), new i(new l(r), t)._iterate(e);
            },
            DoWhilst: i
          };
        },
        { './whilst': 81 }
      ],
      12: [
        function(e, t) {
          'use strict';
          function r(e) {
            return a.call(this, e), (this._result = e), this;
          }
          const { AigleProxy: l } = e('aigle-core'),
            i = e('./aigle'),
            { INTERNAL: s, PENDING: o } = e('./internal/util'),
            { execute: _, setParallel: a } = e('./internal/collection');
          class c extends l {
            constructor(e, t, l = r) {
              super(),
                (this._iterator = t),
                (this._promise = new i(s)),
                (this._coll = void 0),
                (this._size = void 0),
                (this._rest = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                (this._iterate = void 0),
                e === o
                  ? ((this._set = l), (this._iterate = this._callResolve), (this._callResolve = _))
                  : l.call(this, e);
            }
            _execute() {
              return 0 === this._rest ? this._promise._resolve(this._result) : this._iterate(), this._promise;
            }
            _callResolve(e) {
              (0 == --this._rest || !1 === e) && this._promise._resolve(this._result);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            each: function(e, t) {
              return new c(e, t)._execute();
            },
            Each: c
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 82 }
      ],
      13: [
        function(e, t) {
          'use strict';
          function r(e) {
            return c.call(this, e), (this._result = e), this;
          }
          const { AigleProxy: l } = e('aigle-core'),
            i = e('./aigle'),
            { DEFAULT_LIMIT: s, INTERNAL: o, PENDING: _ } = e('./internal/util'),
            { execute: a, setLimit: c } = e('./internal/collection');
          class n extends l {
            constructor(e, t, l, c = r) {
              super(),
                'function' == typeof t && ((l = t), (t = s)),
                (this._iterator = l),
                (this._promise = new i(o)),
                (this._index = 0),
                (this._limit = t),
                (this._coll = void 0),
                (this._rest = void 0),
                (this._size = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                (this._iterate = void 0),
                (this._callRest = void 0),
                e === _
                  ? ((this._set = c), (this._iterate = this._callResolve), (this._callResolve = a))
                  : c.call(this, e);
            }
            _execute() {
              if (0 === this._rest) this._promise._resolve(this._result);
              else for (; this._limit--; ) this._iterate();
              return this._promise;
            }
            _callResolve(e) {
              !1 === e
                ? ((this._callRest = 0), this._promise._resolve(this._result))
                : 0 == --this._rest
                  ? this._promise._resolve(this._result)
                  : 0 < this._callRest-- && this._iterate();
            }
            _callReject(e) {
              (this._callRest = 0), this._promise._reject(e);
            }
          }
          t.exports = {
            eachLimit: function(e, t, r) {
              return new n(e, t, r)._execute();
            },
            EachLimit: n
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 82 }
      ],
      14: [
        function(e, t) {
          'use strict';
          function r(e) {
            return a.call(this, e), (this._result = e), this;
          }
          const { AigleProxy: l } = e('aigle-core'),
            i = e('./aigle'),
            { INTERNAL: s, PENDING: o } = e('./internal/util'),
            { execute: _, setSeries: a } = e('./internal/collection');
          class c extends l {
            constructor(e, t, l = r) {
              super(),
                (this._iterator = t),
                (this._promise = new i(s)),
                (this._index = 0),
                (this._coll = void 0),
                (this._rest = void 0),
                (this._size = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                (this._iterate = void 0),
                e === o
                  ? ((this._set = l), (this._iterate = this._callResolve), (this._callResolve = _))
                  : l.call(this, e);
            }
            _execute() {
              return 0 === this._rest ? this._promise._resolve(this._result) : this._iterate(), this._promise;
            }
            _callResolve(e) {
              0 == --this._rest || !1 === e ? this._promise._resolve(this._result) : this._iterate();
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            eachSeries: function(e, t) {
              return new c(e, t)._execute();
            },
            EachSeries: c
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 82 }
      ],
      15: [
        function(e, t, r) {
          'use strict';
          const i = ['CancellationError', 'TimeoutError'];
          for (let s = i.length; s--; ) r[i[s]] = class extends Error {};
        },
        {}
      ],
      16: [
        function(e, t) {
          'use strict';
          const { Each: r } = e('./each'),
            { PENDING: l } = e('./internal/util'),
            { setShorthand: i } = e('./internal/collection');
          class s extends r {
            constructor(e, t) {
              super(e, t), (this._result = !0), e === l ? (this._set = i) : i.call(this, e);
            }
            _callResolve(e) {
              e ? 0 == --this._rest && this._promise._resolve(!0) : this._promise._resolve(!1);
            }
          }
          t.exports = {
            every: function(e, t) {
              return new s(e, t)._execute();
            },
            Every: s
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      17: [
        function(e, t) {
          'use strict';
          const { EachLimit: r } = e('./eachLimit');
          class l extends r {
            constructor(e, t, r) {
              super(e, t, r), (this._result = !0);
            }
            _callResolve(e) {
              e
                ? 0 == --this._rest
                  ? this._promise._resolve(!0)
                  : 0 < this._callRest-- && this._iterate()
                : this._promise._resolve(!1);
            }
          }
          t.exports = {
            everyLimit: function(e, t, r) {
              return new l(e, t, r)._execute();
            },
            EveryLimit: l
          };
        },
        { './eachLimit': 13 }
      ],
      18: [
        function(e, t) {
          'use strict';
          const { EachSeries: r } = e('./eachSeries.js');
          class l extends r {
            constructor(e, t) {
              super(e, t), (this._result = !0);
            }
            _callResolve(e) {
              e ? (0 == --this._rest ? this._promise._resolve(!0) : this._iterate()) : this._promise._resolve(!1);
            }
          }
          t.exports = {
            everySeries: function(e, t) {
              return new l(e, t)._execute();
            },
            EverySeries: l
          };
        },
        { './eachSeries.js': 14 }
      ],
      19: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e ? this._coll[t] : _), 0 == --this._rest && this._promise._resolve(a(this._result));
          }
          function i(e, t) {
            (this._result[t] = e ? this._coll[this._keys[t]] : _),
              0 == --this._rest && this._promise._resolve(a(this._result));
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection'),
            { INTERNAL: _, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          (c.prototype._set = r),
            (t.exports = {
              filter: function(e, t) {
                return new c(e, t)._execute();
              },
              Filter: c
            });
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      20: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e ? this._coll[t] : _),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? this._coll[this._keys[t]] : _),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection'),
            { INTERNAL: _, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
          }
          t.exports = {
            filterLimit: function(e, t, r) {
              return new c(e, t, r)._execute();
            },
            FilterLimit: c
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      21: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e ? this._coll[t] : _),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? this._coll[this._keys[t]] : _),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection'),
            { INTERNAL: _, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            filterSeries: function(e, t) {
              return new c(e, t)._execute();
            },
            FilterSeries: c
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      22: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e
              ? ((this._size = 0), this._promise._resolve(this._coll[t]))
              : 0 == --this._rest && this._promise._resolve();
          }
          function i(e, t) {
            e
              ? ((this._size = 0), this._promise._resolve(this._coll[this._keys[t]]))
              : 0 == --this._rest && this._promise._resolve();
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            find: function(e, t) {
              return new _(e, t)._execute();
            },
            Find: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      23: [
        function(e, t) {
          'use strict';
          function r(e) {
            return i.call(this, e), void 0 !== this._keys && (this._rest = 0), this;
          }
          const { Each: l } = e('./each'),
            { setShorthand: i } = e('./internal/collection');
          class s extends l {
            constructor(e, t) {
              super(e, t, r), (this._result = -1);
            }
            _callResolve(e, t) {
              e ? ((this._size = 0), this._promise._resolve(t)) : 0 == --this._rest && this._promise._resolve(-1);
            }
          }
          t.exports = {
            findIndex: function(e, t) {
              return new s(e, t)._execute();
            },
            FindIndex: s
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      24: [
        function(e, t) {
          'use strict';
          function r(e) {
            return i.call(this, e), void 0 !== this._keys && (this._rest = 0), this;
          }
          const { EachLimit: l } = e('./eachLimit'),
            { setLimit: i } = e('./internal/collection');
          class s extends l {
            constructor(e, t, l) {
              super(e, t, l, r), (this._result = -1);
            }
            _callResolve(e, t) {
              e
                ? ((this._callRest = 0), this._promise._resolve(t))
                : 0 == --this._rest
                  ? this._promise._resolve(-1)
                  : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            findIndexLimit: function(e, t, r) {
              return new s(e, t, r)._execute();
            },
            FindIndexLimit: s
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      25: [
        function(e, t) {
          'use strict';
          function r(e) {
            return i.call(this, e), void 0 !== this._keys && (this._rest = 0), this;
          }
          const { EachSeries: l } = e('./eachSeries'),
            { setSeries: i } = e('./internal/collection');
          class s extends l {
            constructor(e, t) {
              super(e, t, r), (this._result = -1);
            }
            _callResolve(e, t) {
              e ? this._promise._resolve(t) : 0 == --this._rest ? this._promise._resolve(-1) : this._iterate();
            }
          }
          t.exports = {
            findIndexSeries: function(e, t) {
              return new s(e, t)._execute();
            },
            FindIndexSeries: s
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      26: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e ? ((this._size = 0), this._promise._resolve(`${t}`)) : 0 == --this._rest && this._promise._resolve();
          }
          function i(e, t) {
            e
              ? ((this._size = 0), this._promise._resolve(this._keys[t]))
              : 0 == --this._rest && this._promise._resolve();
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            findKey: function(e, t) {
              return new _(e, t)._execute();
            },
            FindKey: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      27: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(`${t}`))
              : 0 == --this._rest
                ? this._promise._resolve()
                : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(this._keys[t]))
              : 0 == --this._rest
                ? this._promise._resolve()
                : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
          }
          t.exports = {
            findKeyLimit: function(e, t, r) {
              return new _(e, t, r)._execute();
            },
            FindKeyLimit: _
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      28: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e ? this._promise._resolve(`${t}`) : 0 == --this._rest ? this._promise._resolve() : this._iterate();
          }
          function i(e, t) {
            e ? this._promise._resolve(this._keys[t]) : 0 == --this._rest ? this._promise._resolve() : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            findKeySeries: function(e, t) {
              return new _(e, t)._execute();
            },
            FindKeySeries: _
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      29: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(this._coll[t]))
              : 0 == --this._rest
                ? this._promise._resolve()
                : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            e
              ? ((this._callRest = 0), this._promise._resolve(this._coll[this._keys[t]]))
              : 0 == --this._rest
                ? this._promise._resolve()
                : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
          }
          t.exports = {
            findLimit: function(e, t, r) {
              return new _(e, t, r)._execute();
            },
            FindLimit: _
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      30: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e ? this._promise._resolve(this._coll[t]) : 0 == --this._rest ? this._promise._resolve() : this._iterate();
          }
          function i(e, t) {
            e
              ? this._promise._resolve(this._coll[this._keys[t]])
              : 0 == --this._rest
                ? this._promise._resolve()
                : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            findSeries: function(e, t) {
              return new _(e, t)._execute();
            },
            FindSeries: _
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      31: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            this._result[e] ? this._result[e].push(this._coll[t]) : (this._result[e] = [this._coll[t]]),
              0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            this._result[e]
              ? this._result[e].push(this._coll[this._keys[t]])
              : (this._result[e] = [this._coll[this._keys[t]]]),
              0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            groupBy: function(e, t) {
              return new _(e, t)._execute();
            },
            GroupBy: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      32: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            this._result[e] ? this._result[e].push(this._coll[t]) : (this._result[e] = [this._coll[t]]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            this._result[e]
              ? this._result[e].push(this._coll[this._keys[t]])
              : (this._result[e] = [this._coll[this._keys[t]]]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t, l) {
              super(e, t, l, r), (this._result = {});
            }
          }
          t.exports = {
            groupByLimit: function(e, t, r) {
              return new _(e, t, r)._execute();
            },
            GroupByLimit: _
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      33: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            this._result[e] ? this._result[e].push(this._coll[t]) : (this._result[e] = [this._coll[t]]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            this._result[e]
              ? this._result[e].push(this._coll[this._keys[t]])
              : (this._result[e] = [this._coll[this._keys[t]]]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            groupBySeries: function(e, t) {
              return new _(e, t)._execute();
            },
            GroupBySeries: _
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      34: [
        function(e, t) {
          'use strict';
          function r() {
            for (let e = -1; ++e < s; ) {
              const t = l[e];
              switch (((l[e] = void 0), t._resolved)) {
                case 1:
                  t._callResolve();
                  break;
                case 2:
                  t._callReject();
              }
            }
            (s = 0), (i = !1);
          }
          const l = Array(8);
          let s = 0,
            i = !1;
          t.exports = function(e) {
            !1 == i && (setImmediate(r), (i = !0)), (l[s++] = e);
          };
        },
        {}
      ],
      35: [
        function(e, t) {
          'use strict';
          function r() {
            const { _rest: e, _iterator: t, _coll: r } = this;
            for (let l = -1; ++l < e && a(_(t, r[l], l, r), this, l); );
          }
          function l() {
            const { _rest: e, _iterator: t, _coll: r, _keys: l } = this;
            for (let s = -1; ++s < e; ) {
              const e = l[s];
              if (!1 === a(_(t, r[e], e, r), this, s)) break;
            }
          }
          function i() {
            const { _rest: e, _iterator: t, _coll: r, _keys: l, _result: s } = this;
            for (let o = -1; ++o < e; ) {
              const e = l[o];
              if (((s[e] = void 0), !1 === a(_(t, r[e], e, r), this, o))) break;
            }
          }
          function s() {
            function e(l) {
              for (let s = -1; ++s < l.length; ) {
                const i = l[s];
                if (Array.isArray(i)) {
                  e(i);
                  continue;
                }
                t.hasOwnProperty(i) && (r[i] = t[i]);
              }
            }
            const { _coll: t, _result: r } = this;
            e(this._iterator), this._promise._resolve(r);
          }
          function o() {
            function e(t) {
              for (let r = -1; ++r < t.length; ) {
                const i = t[r];
                if (Array.isArray(i)) {
                  e(i);
                  continue;
                }
                l[i] = !0;
              }
            }
            const { _coll: t, _result: r } = this,
              l = {};
            e(this._iterator),
              Object.keys(t).forEach(e => {
                !1 === l.hasOwnProperty(e) && (r[e] = t[e]);
              }),
              this._promise._resolve(r);
          }
          const { call3: _, callProxyReciever: a } = e('./util'),
            [c, n, u] = [
              [r, l],
              [r, i],
              [
                function() {
                  const { _coll: e } = this,
                    t = this._index++;
                  a(_(this._iterator, e[t], t, e), this, t);
                },
                function() {
                  const { _coll: e } = this,
                    t = this._index++,
                    r = this._keys[t];
                  a(_(this._iterator, e[r], r, e), this, t);
                }
              ]
            ].map(function([e, t]) {
              return function(r) {
                if (Array.isArray(r)) (this._coll = r), (this._size = r.length), (this._iterate = e);
                else if (r && 'object' == typeof r) {
                  const e = Object.keys(r);
                  (this._coll = r), (this._size = e.length), (this._keys = e), (this._iterate = t);
                } else this._size = 0;
                return (this._rest = this._size), this;
              };
            }),
            p = {
              iterateArrayParallel: r,
              iterateArrayWithString: function() {
                const { _iterator: e, _coll: t } = this;
                for (let r = -1; ++r < this._size; ) {
                  const l = t[r];
                  l ? this._callResolve(l[e], r) : this._callResolve(void 0, r);
                }
              },
              iterateArrayWithArray: function() {
                const { _coll: e } = this,
                  [t, r] = this._iterator;
                for (let l = -1; ++l < this._size; ) {
                  const i = e[l];
                  i ? this._callResolve(i[t] === r, l) : this._callResolve(void 0, l);
                }
              },
              iterateArrayWithObject: function() {
                const { _iterator: e, _coll: t } = this,
                  r = Object.keys(e);
                let l = -1;
                first: for (; ++l < this._size; ) {
                  const i = t[l];
                  if (!i) {
                    this._callResolve(void 0, l);
                    continue;
                  }
                  for (let t = r.length; t--; ) {
                    const s = r[t];
                    if (i[s] !== e[s]) {
                      this._callResolve(!1, l);
                      continue first;
                    }
                  }
                  this._callResolve(!0, l);
                }
              },
              iterateObjectParallel: l,
              iterateObjectWithString: function() {
                const { _iterator: e, _coll: t, _keys: r } = this;
                for (let l = -1; ++l < this._size; ) {
                  const i = t[r[l]];
                  i ? this._callResolve(i[e], l) : this._callResolve(void 0, l);
                }
              },
              iterateObjectWithArray: function() {
                const { _coll: e, _keys: t } = this,
                  [r, l] = this._iterator;
                for (let s = -1; ++s < this._size; ) {
                  const i = e[t[s]];
                  i ? this._callResolve(i[r] === l, s) : this._callResolve(void 0, s);
                }
              },
              iterateObjectWithObject: function() {
                const { _iterator: e, _coll: t, _keys: r } = this,
                  s = Object.keys(e);
                let l = -1;
                first: for (; ++l < this._size; ) {
                  const i = t[r[l]];
                  if (!i) {
                    this._callResolve(void 0, l);
                    continue;
                  }
                  for (let t = s.length; t--; ) {
                    const r = s[t];
                    if (i[r] !== e[r]) {
                      this._callResolve(!1, l);
                      continue first;
                    }
                  }
                  this._callResolve(!0, l);
                }
              }
            },
            [m, y, d, h] = [
              p,
              Object.assign({}, p, { iterateObjectParallel: i }),
              Object.assign({}, p, { iterateArrayWithArray: s, iterateObjectWithArray: s }),
              Object.assign({}, p, { iterateArrayWithArray: o, iterateObjectWithArray: o })
            ].map(function({
              iterateArrayParallel: e,
              iterateArrayWithString: t,
              iterateArrayWithArray: r,
              iterateArrayWithObject: l,
              iterateObjectParallel: i,
              iterateObjectWithString: s,
              iterateObjectWithArray: o,
              iterateObjectWithObject: _
            }) {
              return function(a) {
                if (Array.isArray(a))
                  switch (((this._coll = a), (this._size = a.length), typeof this._iterator)) {
                    case 'function':
                      this._iterate = e;
                      break;
                    case 'string':
                      this._iterate = t;
                      break;
                    case 'object':
                      this._iterate = Array.isArray(this._iterator) ? r : l;
                  }
                else if (a && 'object' == typeof a) {
                  const e = Object.keys(a);
                  switch (((this._coll = a), (this._size = e.length), (this._keys = e), typeof this._iterator)) {
                    case 'function':
                      this._iterate = i;
                      break;
                    case 'string':
                      this._iterate = s;
                      break;
                    case 'object':
                      this._iterate = Array.isArray(this._iterator) ? o : _;
                  }
                } else this._size = 0;
                return (this._rest = this._size), this;
              };
            });
          t.exports = {
            execute: function(e) {
              (this._callResolve = this._iterate), this._set(e), this._execute();
            },
            setParallel: c,
            setParallelWithOrder: n,
            setShorthand: m,
            setShorthandWithOrder: y,
            setPickShorthand: d,
            setOmitShorthand: h,
            setSeries: u,
            setLimit: function(e) {
              u.call(this, e);
              const { _limit: t, _size: r } = this;
              return (this._limit = t < r ? t : r), (this._callRest = r - this._limit), this;
            }
          };
        },
        { './util': 38 }
      ],
      36: [
        function(e, t) {
          'use strict';
          function r(e) {
            const { _args: t } = this;
            return (
              t[0] === n && ((t[0] = e), (this._callResolve = this._set)), p(u(this._func, t), this), this._promise
            );
          }
          function l(e) {
            const { _args: t } = this;
            t[0] === n ? ((t[0] = e), (this._callResolve = this._set)) : (e = t[0]);
            const r = t[1],
              l = 'function' == typeof r;
            return (
              l && Array.isArray(e)
                ? i(this, _, e => {
                    let r = 0;
                    (t[1] = () => e[r++]), p(u(this._func, t), this);
                  })
                : l && e && 'object' == typeof e
                  ? i(this, a, e => {
                      let r = 0;
                      const l = Object.keys(e);
                      (t[1] = () => e[l[r++]]), p(u(this._func, t), this);
                    })
                  : p(u(this._func, t), this),
              this._promise
            );
          }
          function i(e, t, r) {
            const [l, i] = e._args,
              s = t(l, (e, t) => i(e, t, l));
            return 1 === s._resolved ? r(s._value) : s.then(r, t => e._callReject(t));
          }
          const { AigleProxy: s } = e('aigle-core'),
            o = e('../aigle'),
            { map: _ } = e('../map'),
            { mapValues: a } = e('../mapValues'),
            { INTERNAL: c, PENDING: n, apply: u, callProxyReciever: p } = e('./util');
          t.exports = {
            createProxy: function(e, t) {
              const i = t ? l : r;
              return class extends m {
                constructor(...t) {
                  super(e, i, t);
                }
              };
            }
          };
          class m extends s {
            constructor(e, t, r) {
              super(),
                (this._promise = new o(c)),
                (this._func = e),
                (this._args = r),
                (this._execute = t),
                r[0] === n && ((this._set = this._callResolve), (this._callResolve = t));
            }
            _callResolve(e) {
              this._promise._resolve(e);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
        },
        { '../aigle': 2, '../map': 40, '../mapValues': 43, './util': 38, 'aigle-core': 82 }
      ],
      37: [
        function(e, t) {
          'use strict';
          t.exports = class {
            constructor(e = 8) {
              (this.array = Array(e)), (this.length = 0);
            }
            push(e) {
              this.array[this.length++] = e;
            }
          };
        },
        {}
      ],
      38: [
        function(e, t) {
          (function(r) {
            'use strict';
            function l() {}
            function i(e, t) {
              try {
                return e(t);
              } catch (t) {
                return (d.e = t), d;
              }
            }
            function s(e, t) {
              if (!t || !t.then) return void e._resolve(t);
              if (t instanceof p)
                switch (t._resolved) {
                  case 0:
                    return void t._addReceiver(e, l);
                  case 1:
                    return void e._resolve(t._value);
                  case 2:
                    return t.suppressUnhandledRejections(), void e._reject(t._value);
                }
              o(t, e);
            }
            function o(e, t) {
              e.then(
                function(e) {
                  t._resolve(e);
                },
                function(e) {
                  t._reject(e);
                }
              );
            }
            function _(e, t, r) {
              e.then(
                function(e) {
                  t._callResolve(e, r);
                },
                function(e) {
                  t._callReject(e);
                }
              );
            }
            function a(e) {
              let t = e.length;
              const r = Array(t);
              for (; t--; ) r[t] = e[t];
              return r;
            }
            function c(e) {
              const t = Object.keys(e);
              let r = t.length;
              const l = {};
              for (; r--; ) {
                const i = t[r];
                l[i] = e[i];
              }
              return l;
            }
            function n(e, t, i, s, o) {
              let _ = t,
                l = i;
              for (; _ <= l; ) {
                for (t = _; _ < l && e[_] < s; ) _++;
                for (; l >= t && e[l] >= s; ) l--;
                if (_ > l) break;
                u(e, o, _++, l--);
              }
              return _;
            }
            function u(e, t, s, l) {
              const r = e[s];
              (e[s] = e[l]), (e[l] = r);
              const o = t[s];
              (t[s] = t[l]), (t[l] = o);
            }
            function m(e, t, r, s) {
              if (t === r) return;
              let o = t;
              for (; ++o <= r && e[t] === e[o]; ) {
                const e = o - 1;
                if (s[e] > s[o]) {
                  const t = s[e];
                  (s[e] = s[o]), (s[o] = t);
                }
              }
              if (!(o > r)) {
                const l = e[t] > e[o] ? t : o;
                (o = n(e, t, r, e[l], s)), m(e, t, o - 1, s), m(e, o, r, s);
              }
            }
            const { AigleCore: p } = e('aigle-core'),
              { version: y } = e('../../package.json'),
              d = { e: void 0 },
              h = 'function' == typeof Symbol ? Symbol.iterator : function() {},
              v = 'object' == typeof r && '[object process]' === Object.prototype.toString.call(r);
            t.exports = {
              VERSION: y,
              DEFAULT_LIMIT: 8,
              INTERNAL: l,
              PENDING: function() {},
              UNHANDLED: function() {},
              defaultIterator: function(e) {
                return e;
              },
              errorObj: d,
              iteratorSymbol: h,
              call0: function(e) {
                try {
                  return e();
                } catch (t) {
                  return (d.e = t), d;
                }
              },
              call1: i,
              call3: function(e, t, r, l) {
                try {
                  return e(t, r, l);
                } catch (t) {
                  return (d.e = t), d;
                }
              },
              apply: function(e, t) {
                try {
                  switch (t.length) {
                    case 0:
                      return e();
                    case 1:
                      return e(t[0]);
                    case 2:
                      return e(t[0], t[1]);
                    case 3:
                      return e(t[0], t[1], t[2]);
                    default:
                      return e.apply(null, t);
                  }
                } catch (t) {
                  return (d.e = t), d;
                }
              },
              callResolve: function(e, t, r) {
                if ('function' != typeof t) return void e._resolve(r);
                const l = i(t, r);
                return l === d ? void e._reject(d.e) : void s(e, l);
              },
              callReject: function(e, t, r) {
                if ('function' != typeof t) return void e._reject(r);
                const l = i(t, r);
                return l === d ? void e._reject(d.e) : void s(e, l);
              },
              callReceiver: s,
              callThen: o,
              callProxyReciever: function(e, t, r) {
                if (e instanceof p)
                  switch (e._resolved) {
                    case 0:
                      return e._addReceiver(t, r), !0;
                    case 1:
                      return t._callResolve(e._value, r), !0;
                    case 2:
                      return e.suppressUnhandledRejections(), t._callReject(e._value), !1;
                  }
                return e === d ? (t._callReject(d.e), !1) : (e && e.then ? _(e, t, r) : t._callResolve(e, r), !0);
              },
              promiseArrayEach: function(e) {
                const { _rest: t, _coll: r } = e;
                for (let l = -1; ++l < t; ) {
                  const t = r[l];
                  if (t instanceof p)
                    switch (t._resolved) {
                      case 0:
                        t._addReceiver(e, l);
                        continue;
                      case 1:
                        e._callResolve(t._value, l);
                        continue;
                      case 2:
                        return t.suppressUnhandledRejections(), void e._callReject(t._value);
                    }
                  t && t.then ? _(t, e, l) : e._callResolve(t, l);
                }
              },
              promiseObjectEach: function(e) {
                const { _rest: t, _keys: r, _coll: l, _result: s } = e;
                for (let o = -1; ++o < t; ) {
                  const t = r[o],
                    i = l[t];
                  if (((s[t] = void 0), i instanceof p))
                    switch (i._resolved) {
                      case 0:
                        i._addReceiver(e, t);
                        continue;
                      case 1:
                        e._callResolve(i._value, t);
                        continue;
                      case 2:
                        return i.suppressUnhandledRejections(), void e._callReject(i._value);
                    }
                  i && i.then ? _(i, e, t) : e._callResolve(i, t);
                }
              },
              promiseMapEach: function(e) {
                const { _result: t } = e,
                  r = e._coll[h]();
                for (let l; !1 === (l = r.next()).done; ) {
                  const [r, i] = l.value;
                  if ((t.set(r, i), i instanceof p))
                    switch (i._resolved) {
                      case 0:
                        i._addReceiver(e, r);
                        continue;
                      case 1:
                        e._callResolve(i._value, r);
                        continue;
                      case 2:
                        return i.suppressUnhandledRejections(), void e._callReject(i._value);
                    }
                  i && i.then ? _(i, e, r) : e._callResolve(i, r);
                }
              },
              promiseSetEach: function(e) {
                const t = e._coll[h]();
                for (let r = -1, l; !1 === (l = t.next()).done; ) {
                  const t = l.value;
                  if (t instanceof p)
                    switch (t._resolved) {
                      case 0:
                        t._addReceiver(e, ++r);
                        continue;
                      case 1:
                        e._callResolve(t._value, ++r);
                        continue;
                      case 2:
                        return t.suppressUnhandledRejections(), void e._callReject(t._value);
                    }
                  t && t.then ? _(t, e, ++r) : e._callResolve(t, ++r);
                }
              },
              compactArray: function(e) {
                let t = -1;
                const r = e.length,
                  i = [];
                for (; ++t < r; ) {
                  const r = e[t];
                  r !== l && i.push(r);
                }
                return i;
              },
              concatArray: function(e) {
                let t = -1;
                const r = e.length,
                  l = [];
                for (; ++t < r; ) {
                  const r = e[t];
                  Array.isArray(r) ? l.push(...r) : r !== void 0 && l.push(r);
                }
                return l;
              },
              clone: function(e) {
                return Array.isArray(e) ? a(e) : c(e);
              },
              createEmptyObject: function(e, t) {
                let r = -1;
                const i = t.length,
                  l = {};
                for (; ++r < i; ) l[t[r]] = void 0;
                return l;
              },
              sortArray: function(e, t) {
                const r = e.length,
                  l = Array(r);
                for (let s = 0; s < r; s++) l[s] = s;
                m(t, 0, r - 1, l);
                const s = Array(r);
                for (let o = 0; o < r; o++) {
                  const t = l[o];
                  s[o] = t === void 0 ? e[o] : e[t];
                }
                return s;
              },
              sortObject: function(e, t, r) {
                const s = t.length,
                  l = Array(s);
                for (let o = 0; o < s; o++) l[o] = o;
                m(r, 0, s - 1, l);
                const o = Array(s);
                for (let _ = 0; _ < s; _++) {
                  const r = l[_];
                  o[_] = e[t[r === void 0 ? _ : r]];
                }
                return o;
              },
              printWarning: function(e) {
                v ? console.warn(`\u001b[31m${e}\u001b[0m\n`) : console.warn(`%c${e}`, 'color: red');
              }
            };
          }.call(this, e('_process')));
        },
        { '../../package.json': 88, _process: 83, 'aigle-core': 82 }
      ],
      39: [
        function(e, t) {
          'use strict';
          function r(e, t) {
            const { _handler: r } = e;
            if (r === void 0) return e._promise._resolve(t);
            switch (typeof t) {
              case 'string':
                t = t.split('');
                break;
              case 'object':
                if (Array.isArray(t)) break;
                if (t) {
                  const e = Object.keys(t);
                  let r = e.length;
                  const l = Array(r);
                  for (; r--; ) l[r] = t[e[r]];
                  t = l;
                  break;
                }
              default:
                return a(o(r, t), e, s);
            }
            a(_(r, t), e, s);
          }
          const { AigleProxy: l } = e('aigle-core'),
            i = e('./aigle'),
            { INTERNAL: s, call1: o, apply: _, callProxyReciever: a } = e('./internal/util');
          class c extends l {
            constructor(e, t) {
              super(), (this._promise = new i(s)), (this._rest = t), (this._result = Array(t)), (this._handler = e);
            }
            _callResolve(e, t) {
              if (t === s) return this._promise._resolve(e);
              if (((this._result[t] = e), 0 == --this._rest)) {
                const { _handler: e, _result: t } = this;
                void 0 === e ? this._promise._resolve(t) : a(_(e, t), this, s);
              }
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            join: function() {
              let e = arguments.length;
              const t = 'function' == typeof arguments[e - 1] ? arguments[--e] : void 0,
                r = new c(t, e);
              for (; e--; ) a(arguments[e], r, e);
              return r._promise;
            },
            Spread: class extends l {
              constructor(e) {
                super(), (this._promise = new i(s)), (this._handler = e);
              }
              _callResolve(e, t) {
                return t === s ? this._promise._resolve(e) : void r(this, e);
              }
              _callReject(e) {
                this._promise._reject(e);
              }
            }
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      40: [
        function(e, t) {
          'use strict';
          function r(e) {
            return i.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { Each: l } = e('./each'),
            { setShorthand: i } = e('./internal/collection');
          class s extends l {
            constructor(e, t) {
              super(e, t, r);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
            }
          }
          t.exports = {
            map: function(e, t) {
              return new s(e, t)._execute();
            },
            Map: s
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      41: [
        function(e, t) {
          'use strict';
          function r(e) {
            return i.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { EachLimit: l } = e('./eachLimit'),
            { setLimit: i } = e('./internal/collection');
          class s extends l {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
            _callResolve(e, t) {
              (this._result[t] = e),
                0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            mapLimit: function(e, t, r) {
              return new s(e, t, r)._execute();
            },
            MapLimit: s
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      42: [
        function(e, t) {
          'use strict';
          function r(e) {
            return i.call(this, e), (this._result = Array(this._rest)), this;
          }
          const { EachSeries: l } = e('./eachSeries'),
            { setSeries: i } = e('./internal/collection');
          class s extends l {
            constructor(e, t) {
              super(e, t, r);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
            }
          }
          t.exports = {
            mapSeries: function(e, t) {
              return new s(e, t)._execute();
            },
            MapSeries: s
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      43: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            (this._result[this._keys[t]] = e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthandWithOrder: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            mapValues: function(e, t) {
              return new _(e, t)._execute();
            },
            MapValues: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      44: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              void 0 === this._keys
                ? ((this._result = {}), (this._callResolve = l))
                : ((this._result = _(e, this._keys)), (this._callResolve = i)),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[this._keys[t]] = e),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection'),
            { createEmptyObject: _ } = e('./internal/util');
          class a extends s {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
          }
          t.exports = {
            mapValuesLimit: function(e, t, r) {
              return new a(e, t, r)._execute();
            },
            MapValuesLimit: a
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      45: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            (this._result[t] = e), 0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            (this._result[this._keys[t]] = e),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            mapValuesSeries: function(e, t) {
              return new _(e, t)._execute();
            },
            MapValuesSeries: _
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      46: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e || (this._result[t] = this._coll[t]), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            if (!e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setOmitShorthand: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t, l) {
              'function' != typeof t && (t = [t, ...l]), super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            omit: function(e, t, ...r) {
              return new _(e, t, r)._execute();
            },
            Omit: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      47: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e || (this._result[t] = this._coll[t]), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            if (!e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            omitBy: function(e, t) {
              return new _(e, t)._execute();
            },
            OmitBy: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      48: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e || (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            if (!e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t, l) {
              super(e, t, l, r), (this._result = {});
            }
          }
          t.exports = {
            omitByLimit: function(e, t, r) {
              return new _(e, t, r)._execute();
            },
            OmitByLimit: _
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      49: [
        function(e, t) {
          'use strict';
          function r(e) {
            return _.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e || (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            if (!e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { PENDING: o } = e('./internal/util'),
            { setSeries: _ } = e('./internal/collection');
          class a extends s {
            constructor(e, t) {
              super(e, t),
                (this._result = {}),
                e === o ? (this._set = r) : (this._callResolve = this._keys === void 0 ? l : i);
            }
          }
          t.exports = {
            omitBySeries: function(e, t) {
              return new a(e, t)._execute();
            },
            OmitBySeries: a
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      50: [
        function(e, t) {
          'use strict';
          const { AigleProxy: r } = e('aigle-core'),
            l = e('./aigle'),
            {
              INTERNAL: i,
              PENDING: s,
              promiseArrayEach: o,
              promiseObjectEach: _,
              promiseMapEach: a,
              promiseSetEach: c,
              iteratorSymbol: n
            } = e('./internal/util'),
            { callResolve: u, callResolveMap: p } = e('./props');
          class m extends r {
            constructor(e) {
              super(),
                (this._promise = new l(i)),
                (this._rest = void 0),
                (this._coll = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                e === s ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (((this._coll = e), Array.isArray(e))) {
                const t = e.length;
                (this._rest = t), (this._result = Array(t)), (this._callResolve = u), o(this);
              } else if (!e || 'object' != typeof e) (this._rest = 0), (this._result = {});
              else if (e[n])
                (this._rest = e.size),
                  e instanceof Map
                    ? ((this._result = new Map()), (this._callResolve = p), a(this))
                    : ((this._result = Array(this._rest)), (this._callResolve = u), c(this));
              else {
                const t = Object.keys(e);
                (this._rest = t.length), (this._keys = t), (this._result = {}), (this._callResolve = u), _(this);
              }
              return 0 === this._rest && this._promise._resolve(this._result), this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            parallel: function(e) {
              return new m(e)._promise;
            },
            Parallel: m
          };
        },
        { './aigle': 2, './internal/util': 38, './props': 57, 'aigle-core': 82 }
      ],
      51: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e && (this._result[t] = this._coll[t]), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            if (e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setPickShorthand: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t, l) {
              'function' != typeof t && (t = [t, ...l]), super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            pick: function(e, t, ...r) {
              return new _(e, t, r)._execute();
            },
            Pick: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      52: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e && (this._result[t] = this._coll[t]), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function i(e, t) {
            if (e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest && this._promise._resolve(this._result);
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            pickBy: function(e, t) {
              return new _(e, t)._execute();
            },
            PickBy: _
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      53: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e && (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            if (e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t, l) {
              super(e, t, l, r), (this._result = {});
            }
          }
          t.exports = {
            pickByLimit: function(e, t, r) {
              return new _(e, t, r)._execute();
            },
            PickByLimit: _
          };
        },
        { './eachLimit': 13, './internal/collection': 35 }
      ],
      54: [
        function(e, t) {
          'use strict';
          function r(e) {
            return o.call(this, e), (this._callResolve = void 0 === this._keys ? l : i), this;
          }
          function l(e, t) {
            e && (this._result[t] = this._coll[t]),
              0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          function i(e, t) {
            if (e) {
              const e = this._keys[t];
              this._result[e] = this._coll[e];
            }
            0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection');
          class _ extends s {
            constructor(e, t) {
              super(e, t, r), (this._result = {});
            }
          }
          t.exports = {
            pickBySeries: function(e, t) {
              return new _(e, t)._execute();
            },
            PickBySeries: _
          };
        },
        { './eachSeries': 14, './internal/collection': 35 }
      ],
      55: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (t, r) => (t ? e._reject(t) : e._resolve(r));
          }
          function l(e, t) {
            function l(i) {
              const _ = new s(o),
                a = r(_);
              let c = arguments.length;
              switch (c) {
                case 0:
                  e[t](a);
                  break;
                case 1:
                  e[t](i, a);
                  break;
                default:
                  const r = Array(c);
                  for (; c--; ) r[c] = arguments[c];
                  (r[r.length] = a), e[t].apply(e, r);
              }
              return _;
            }
            return (l.__isPromisified__ = !0), l;
          }
          function i(e, t) {
            function l(e) {
              const r = new s(o);
              let i = arguments.length,
                l;
              switch (i) {
                case 0:
                  l = n.call(t || this);
                  break;
                case 1:
                  l = n.call(t || this, e);
                  break;
                default:
                  const r = Array(i);
                  for (; i--; ) r[i] = arguments[i];
                  l = n.apply(t || this, r);
              }
              return _(l, r), r;
            }
            function i(i) {
              const _ = new s(o),
                a = r(_);
              let c = arguments.length;
              switch (c) {
                case 0:
                  e.call(t || this, a);
                  break;
                case 1:
                  e.call(t || this, i, a);
                  break;
                default:
                  const r = Array(c);
                  for (; c--; ) r[c] = arguments[c];
                  (r[r.length] = a), e.apply(t || this, r);
              }
              return _;
            }
            const n = e[c];
            if (n) return (l.__isPromisified__ = !0), l;
            return e === setTimeout ? s.delay : e === a ? s.resolve : ((i.__isPromisified__ = !0), i);
          }
          const s = e('./aigle'),
            { INTERNAL: o, callThen: _ } = e('./internal/util'),
            a = 'function' == typeof setImmediate ? setImmediate : {},
            c =
              (() => {
                try {
                  return e('util').promisify.custom;
                } catch (t) {}
              })() || {};
          t.exports = function(e, t) {
            switch (typeof e) {
              case 'object':
                switch (typeof t) {
                  case 'string':
                  case 'number':
                    if ('function' != typeof e[t]) throw new TypeError('Function not found key: ' + t);
                    return e[t].__isPromisified__ ? e[t] : l(e, t);
                  default:
                    throw new TypeError('Second argument is invalid');
                }
              case 'function':
                if (e.__isPromisified__) return e;
                const r = t && t.context !== void 0 ? t.context : void 0;
                return i(e, r);
              default:
                throw new TypeError('Type of first argument is not function');
            }
          };
        },
        { './aigle': 2, './internal/util': 38, util: 87 }
      ],
      56: [
        function(e, t) {
          'use strict';
          function r(e) {
            return /^(?!_).*/.test(e);
          }
          function i(e, t, r, i, o, _) {
            const a = {};
            switch (typeof r) {
              case 'function':
                if (o) {
                  if (r.__isPromisified__) return;
                  const t = `${i}${e}`;
                  if (!o[t]) o[t] = s(r);
                  else if (!o[t].__isPromisified__)
                    throw new TypeError(`Cannot promisify an API that has normal methods with '${e}'-suffix`);
                }
                l(e, t, r, r, _, a), l(e, t, r.prototype, r.prototype, _, a);
                break;
              case 'object':
                if (!r) break;
                l(e, t, r, r, _, a), l(e, t, Object.getPrototypeOf(r), r, _, a);
            }
          }
          function l(e, t, r, s, n, u) {
            if (0 != n-- && r && _ !== r && a !== r && c !== r && !Object.isFrozen(r)) {
              const _ = Object.getOwnPropertyNames(r);
              for (let a = _.length; a--; ) {
                const l = _[a];
                if (!0 === o[l] || !0 === u[l] || !t(l)) continue;
                const c = Object.getOwnPropertyDescriptor(r, l);
                !c || c.set || c.get || ((u[l] = !0), i(e, t, r[l], l, s, n));
              }
            }
          }
          const s = e('./promisify'),
            o = {
              constructor: !0,
              arity: !0,
              length: !0,
              name: !0,
              arguments: !0,
              caller: !0,
              callee: !0,
              prototype: !0,
              __isPromisified__: !0
            };
          t.exports = function(e, t) {
            const { suffix: l = 'Async', filter: s = r, depth: o = 2 } = t || {};
            return i(l, s, e, void 0, void 0, o), e;
          };
          const _ = Function.prototype,
            a = Object.prototype,
            c = Array.prototype;
        },
        { './promisify': 55 }
      ],
      57: [
        function(e, t) {
          'use strict';
          function r(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          function l(e, t) {
            this._result.set(t, e), 0 == --this._rest && this._promise._resolve(this._result);
          }
          const { AigleProxy: i } = e('aigle-core'),
            s = e('./aigle'),
            { INTERNAL: o, PENDING: _, promiseObjectEach: a, promiseMapEach: c } = e('./internal/util');
          class n extends i {
            constructor(e) {
              super(),
                (this._promise = new s(o)),
                (this._rest = void 0),
                (this._result = void 0),
                (this._coll = void 0),
                (this._keys = void 0),
                e === _ ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (((this._coll = e), !e || 'object' != typeof e)) (this._rest = 0), (this._result = {});
              else if (e instanceof Map)
                (this._result = new Map()), (this._rest = e.size), (this._callResolve = l), c(this);
              else {
                const t = Object.keys(e);
                (this._result = {}), (this._rest = t.length), (this._keys = t), (this._callResolve = r), a(this);
              }
              return 0 === this._rest && this._promise._resolve(this._result), this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            props: function(e) {
              return new n(e)._promise;
            },
            Props: n,
            callResolve: r,
            callResolveMap: l
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      58: [
        function(e, t) {
          'use strict';
          function r(e) {
            this._promise._resolve(e);
          }
          const { AigleProxy: l } = e('aigle-core'),
            i = e('./aigle'),
            {
              INTERNAL: s,
              PENDING: o,
              promiseArrayEach: _,
              promiseObjectEach: a,
              promiseMapEach: c,
              promiseSetEach: n,
              iteratorSymbol: u
            } = e('./internal/util');
          class p extends l {
            constructor(e) {
              super(),
                (this._promise = new i(s)),
                (this._rest = void 0),
                (this._coll = void 0),
                (this._keys = void 0),
                (this._result = void 0),
                e === o ? (this._callResolve = this._set) : ((this._callResolve = void 0), this._set(e));
            }
            _set(e) {
              if (((this._coll = e), (this._callResolve = r), Array.isArray(e))) {
                const t = e.length;
                (this._rest = t), _(this);
              } else if (!e || 'object' != typeof e) this._rest = 0;
              else if (e[u]) (this._rest = e.size), e instanceof Map ? ((this._result = new Map()), c(this)) : n(this);
              else {
                const t = Object.keys(e);
                (this._result = {}), (this._rest = t.length), (this._keys = t), a(this);
              }
              return this;
            }
            _execute() {
              return this._promise;
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            race: function(e) {
              return new p(e)._promise;
            },
            Race: p
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      59: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              n.call(this, e),
              void 0 === this._keys
                ? ((this._iterate = l), (this._execute = s))
                : ((this._iterate = i), (this._execute = o)),
              this
            );
          }
          function l(e, t) {
            y(m(this._iterator, t, this._coll[e], e), this, e);
          }
          function i(e, t) {
            const r = this._keys[e];
            y(m(this._iterator, t, this._coll[r], r), this, e);
          }
          function s() {
            return (
              0 === this._rest
                ? this._promise._resolve(this._result)
                : void 0 === this._result
                  ? this._callResolve(this._coll[0], 0)
                  : this._iterate(0, this._result),
              this._promise
            );
          }
          function o() {
            return (
              0 === this._rest
                ? this._promise._resolve(this._result)
                : void 0 === this._result
                  ? this._callResolve(this._coll[this._keys[0]], 0)
                  : this._iterate(0, this._result),
              this._promise
            );
          }
          const { AigleProxy: _ } = e('aigle-core'),
            a = e('./aigle'),
            { execute: c, setSeries: n } = e('./internal/collection'),
            { INTERNAL: u, PENDING: p, call3: m, callProxyReciever: y } = e('./internal/util');
          class d extends _ {
            constructor(e, t, l) {
              super(),
                (this._result = l),
                (this._iterator = t),
                (this._promise = new a(u)),
                (this._coll = void 0),
                (this._rest = void 0),
                (this._size = void 0),
                (this._keys = void 0),
                (this._iterate = void 0),
                e === p
                  ? ((this._set = r), (this._iterate = this._callResolve), (this._callResolve = c))
                  : r.call(this, e);
            }
            _callResolve(e, t) {
              0 == --this._rest ? this._promise._resolve(e) : this._iterate(++t, e);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            reduce: function(e, t, r) {
              return new d(e, t, r)._execute();
            },
            Reduce: d
          };
        },
        { './aigle': 2, './internal/collection': 35, './internal/util': 38, 'aigle-core': 82 }
      ],
      60: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e ? _ : this._coll[t]), 0 == --this._rest && this._promise._resolve(a(this._result));
          }
          function i(e, t) {
            (this._result[t] = e ? _ : this._coll[this._keys[t]]),
              0 == --this._rest && this._promise._resolve(a(this._result));
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection'),
            { INTERNAL: _, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            reject: function(e, t) {
              return new c(e, t)._execute();
            },
            Reject: c
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      61: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e ? _ : this._coll[t]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? _ : this._coll[this._keys[t]]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection'),
            { INTERNAL: _, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
          }
          t.exports = {
            rejectLimit: function(e, t, r) {
              return new c(e, t, r)._execute();
            },
            RejectLimit: c
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      62: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e ? _ : this._coll[t]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e ? _ : this._coll[this._keys[t]]),
              0 == --this._rest ? this._promise._resolve(a(this._result)) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection'),
            { INTERNAL: _, compactArray: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            rejectSeries: function(e, t) {
              return new c(e, t)._execute();
            },
            RejectSeries: c
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      63: [
        function(e, t) {
          'use strict';
          const { AigleProxy: r } = e('aigle-core'),
            l = e('./aigle'),
            { INTERNAL: i, call0: s, callProxyReciever: o } = e('./internal/util');
          class _ extends r {
            constructor(e, t) {
              super(), (this._promise = new l(i)), (this._rest = t), (this._handler = e), this._iterate();
            }
            _iterate() {
              o(s(this._handler), this, void 0);
            }
            _callResolve(e) {
              this._promise._resolve(e);
            }
            _callReject(e) {
              0 == --this._rest ? this._promise._reject(e) : this._iterate();
            }
          }
          t.exports = function(e, t) {
            return 'function' == typeof e && ((t = e), (e = 5)), new _(t, e)._promise;
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      64: [
        function(e, t) {
          'use strict';
          const { Each: r } = e('./each'),
            { setShorthand: l } = e('./internal/collection');
          class i extends r {
            constructor(e, t) {
              super(e, t, l), (this._result = !1);
            }
            _callResolve(e) {
              e ? this._promise._resolve(!0) : 0 == --this._rest && this._promise._resolve(!1);
            }
          }
          t.exports = {
            some: function(e, t) {
              return new i(e, t)._execute();
            },
            Some: i
          };
        },
        { './each': 12, './internal/collection': 35 }
      ],
      65: [
        function(e, t) {
          'use strict';
          const { EachLimit: r } = e('./eachLimit');
          class l extends r {
            constructor(e, t, r) {
              super(e, t, r), (this._result = !1);
            }
            _callResolve(e) {
              e
                ? this._promise._resolve(!0)
                : 0 == --this._rest
                  ? this._promise._resolve(!1)
                  : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            someLimit: function(e, t, r) {
              return new l(e, t, r)._execute();
            },
            SomeLimit: l
          };
        },
        { './eachLimit': 13 }
      ],
      66: [
        function(e, t) {
          'use strict';
          const { EachSeries: r } = e('./eachSeries.js');
          class l extends r {
            constructor(e, t) {
              super(e, t), (this._result = !1);
            }
            _callResolve(e) {
              e ? this._promise._resolve(!0) : 0 == --this._rest ? this._promise._resolve(!1) : this._iterate();
            }
          }
          t.exports = {
            someSeries: function(e, t) {
              return new l(e, t)._execute();
            },
            SomeSeries: l
          };
        },
        { './eachSeries.js': 14 }
      ],
      67: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(_(this._coll, this._result));
          }
          function i(e, t) {
            (this._result[t] = e), 0 == --this._rest && this._promise._resolve(a(this._coll, this._keys, this._result));
          }
          const { Each: s } = e('./each'),
            { setShorthand: o } = e('./internal/collection'),
            { sortArray: _, sortObject: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            sortBy: function(e, t) {
              return new c(e, t)._execute();
            },
            SortBy: c
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      68: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e),
              0 == --this._rest
                ? this._promise._resolve(_(this._coll, this._result))
                : 0 < this._callRest-- && this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e),
              0 == --this._rest
                ? this._promise._resolve(a(this._coll, this._keys, this._result))
                : 0 < this._callRest-- && this._iterate();
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection'),
            { sortArray: _, sortObject: a } = e('./internal/util');
          class c extends s {
            constructor(e, t, l) {
              super(e, t, l, r);
            }
          }
          t.exports = {
            sortByLimit: function(e, t, r) {
              return new c(e, t, r)._execute();
            },
            SortByLimit: c
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      69: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              (this._result = Array(this._rest)),
              (this._callResolve = void 0 === this._keys ? l : i),
              this
            );
          }
          function l(e, t) {
            (this._result[t] = e),
              0 == --this._rest ? this._promise._resolve(_(this._coll, this._result)) : this._iterate();
          }
          function i(e, t) {
            (this._result[t] = e),
              0 == --this._rest ? this._promise._resolve(a(this._coll, this._keys, this._result)) : this._iterate();
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection'),
            { sortArray: _, sortObject: a } = e('./internal/util');
          class c extends s {
            constructor(e, t) {
              super(e, t, r);
            }
          }
          t.exports = {
            sortBySeries: function(e, t) {
              return new c(e, t)._execute();
            },
            SortBySeries: c
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      70: [
        function(e, t) {
          'use strict';
          const r = e('./aigle'),
            { INTERNAL: l, callResolve: i } = e('./internal/util');
          t.exports = function(e, t) {
            const s = new r(l);
            return i(s, t, e), s.then(() => e);
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      71: [
        function(e, t) {
          'use strict';
          const r = e('./aigle'),
            { INTERNAL: l, callResolve: i } = e('./internal/util');
          t.exports = function(e, t) {
            const s = new r(l);
            return i(s, t, e), s;
          };
        },
        { './aigle': 2, './internal/util': 38 }
      ],
      72: [
        function(e, t) {
          'use strict';
          const { AigleProxy: r } = e('aigle-core'),
            l = e('./aigle'),
            { TimeoutError: i } = e('./error'),
            { INTERNAL: s } = e('./internal/util');
          t.exports = class extends r {
            constructor(e, t) {
              super(),
                (this._promise = new l(s)),
                (this._message = t),
                (this._timer = setTimeout(() => {
                  t ? this._callReject(t) : this._callReject(new i('operation timed out'));
                }, e));
            }
            _callResolve(e) {
              clearTimeout(this._timer), this._promise._resolve(e);
            }
            _callReject(e) {
              clearTimeout(this._timer), this._promise._reject(e);
            }
          };
        },
        { './aigle': 2, './error': 15, './internal/util': 38, 'aigle-core': 82 }
      ],
      73: [
        function(e, t) {
          'use strict';
          function r(e) {
            (e = 0 | +e),
              1 <= e ? ((this._rest = e), (this._result = Array(e))) : ((this._rest = 0), (this._result = []));
          }
          function l(e) {
            (this._callResolve = this._rest), r.call(this, e), this._execute();
          }
          const { AigleProxy: i } = e('aigle-core'),
            s = e('./aigle'),
            { INTERNAL: o, PENDING: _, defaultIterator: a, call1: c, callProxyReciever: n } = e('./internal/util');
          class u extends i {
            constructor(e, t) {
              super(),
                (this._promise = new s(o)),
                (this._iterator = 'function' == typeof t ? t : a),
                (this._rest = void 0),
                (this._result = void 0),
                e === _ ? ((this._rest = this._callResolve), (this._callResolve = l)) : r.call(this, e);
            }
            _execute() {
              if (1 <= this._rest) {
                const { _rest: e, _iterator: t } = this;
                for (let r = -1; ++r < e && n(c(t, r), this, r); );
              } else this._promise._resolve(this._result);
              return this._promise;
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest && this._promise._resolve(this._result);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            times: function(e, t) {
              return new u(e, t)._execute();
            },
            Times: u,
            set: r,
            execute: l
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      74: [
        function(e, t) {
          'use strict';
          function r(e) {
            if (((e = 0 | +e), 1 <= e)) {
              (this._rest = e), (this._result = Array(e));
              const { _limit: t } = this;
              (this._limit = t < e ? t : e), (this._callRest = e - this._limit);
            } else (this._rest = 0), (this._result = []);
          }
          function l(e) {
            (this._callResolve = this._rest), r.call(this, e), this._execute();
          }
          const { AigleProxy: i } = e('aigle-core'),
            s = e('./aigle'),
            { INTERNAL: o, PENDING: _, DEFAULT_LIMIT: a, defaultIterator: c, call1: n, callProxyReciever: u } = e(
              './internal/util'
            );
          class p extends i {
            constructor(e, t, i) {
              super(),
                'function' == typeof t && ((i = t), (t = a)),
                (this._promise = new s(o)),
                (this._index = 0),
                (this._limit = t),
                (this._iterator = 'function' == typeof i ? i : c),
                (this._rest = void 0),
                (this._result = void 0),
                (this._callRest = void 0),
                e === _ ? ((this._rest = this._callResolve), (this._callResolve = l)) : r.call(this, e);
            }
            _execute() {
              if (0 === this._rest) this._promise._resolve(this._result);
              else for (; this._limit--; ) this._iterate();
              return this._promise;
            }
            _iterate() {
              const e = this._index++;
              u(n(this._iterator, e), this, e);
            }
            _callResolve(e, t) {
              (this._result[t] = e),
                0 == --this._rest ? this._promise._resolve(this._result) : 0 < this._callRest-- && this._iterate();
            }
            _callReject(e) {
              (this._callRest = 0), this._promise._reject(e);
            }
          }
          t.exports = {
            timesLimit: function(e, t, r) {
              return new p(e, t, r)._execute();
            },
            TimesLimit: p
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      75: [
        function(e, t) {
          'use strict';
          const { AigleProxy: r } = e('aigle-core'),
            l = e('./aigle'),
            { set: i, execute: s } = e('./times'),
            { INTERNAL: o, PENDING: _, defaultIterator: a, call1: c, callProxyReciever: n } = e('./internal/util');
          class u extends r {
            constructor(e, t) {
              super(),
                (this._promise = new l(o)),
                (this._iterator = 'function' == typeof t ? t : a),
                (this._index = 0),
                (this._rest = void 0),
                (this._result = void 0),
                e === _ ? ((this._rest = this._callResolve), (this._callResolve = s)) : i.call(this, e);
            }
            _execute() {
              return 1 <= this._rest ? this._iterate() : this._promise._resolve(this._result), this._promise;
            }
            _iterate() {
              const e = this._index++;
              n(c(this._iterator, e), this, e);
            }
            _callResolve(e, t) {
              (this._result[t] = e), 0 == --this._rest ? this._promise._resolve(this._result) : this._iterate();
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            timesSeries: function(e, t) {
              return new u(e, t)._execute();
            },
            TimesSeries: u
          };
        },
        { './aigle': 2, './internal/util': 38, './times': 73, 'aigle-core': 82 }
      ],
      76: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              void 0 !== this._keys || void 0 === this._coll
                ? (void 0 === this._result && (this._result = {}), (this._iterate = i))
                : (void 0 === this._result && (this._result = []), (this._iterate = l)),
              this
            );
          }
          function l() {
            const { _rest: e, _result: t, _iterator: r, _coll: l } = this;
            for (let s = -1; ++s < e && a(_(r, t, l[s], s), this, s); );
          }
          function i() {
            const { _rest: e, _result: t, _iterator: r, _coll: l, _keys: s } = this;
            for (let o = -1; ++o < e; ) {
              const e = s[o];
              if (!1 === a(_(r, t, l[e], e), this, o)) break;
            }
          }
          const { Each: s } = e('./each'),
            { setParallel: o } = e('./internal/collection'),
            { call3: _, callProxyReciever: a, clone: c } = e('./internal/util');
          class n extends s {
            constructor(e, t, l) {
              super(e, t, r), l !== void 0 && (this._result = l);
            }
            _callResolve(e) {
              !1 === e
                ? this._promise._resolve(c(this._result))
                : 0 == --this._rest && this._promise._resolve(this._result);
            }
          }
          t.exports = {
            transform: function(e, t, r) {
              return new n(e, t, r)._execute();
            },
            Transform: n
          };
        },
        { './each': 12, './internal/collection': 35, './internal/util': 38 }
      ],
      77: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              void 0 !== this._keys || void 0 === this._coll
                ? (void 0 === this._result && (this._result = {}), (this._iterate = i))
                : (void 0 === this._result && (this._result = []), (this._iterate = l)),
              this
            );
          }
          function l() {
            const e = this._index++;
            c(a(this._iterator, this._result, this._coll[e], e), this, e);
          }
          function i() {
            const e = this._index++,
              t = this._keys[e];
            c(a(this._iterator, this._result, this._coll[t], t), this, e);
          }
          const { EachLimit: s } = e('./eachLimit'),
            { setLimit: o } = e('./internal/collection'),
            { DEFAULT_LIMIT: _, call3: a, callProxyReciever: c, clone: n } = e('./internal/util');
          class u extends s {
            constructor(e, t, l, i) {
              'function' == typeof t && ((i = l), (l = t), (t = _)),
                super(e, t, l, r),
                i !== void 0 && (this._result = i);
            }
            _callResolve(e) {
              !1 === e
                ? this._promise._resolve(n(this._result))
                : 0 == --this._rest
                  ? this._promise._resolve(this._result)
                  : 0 < this._callRest-- && this._iterate();
            }
          }
          t.exports = {
            transformLimit: function(e, t, r, l) {
              return new u(e, t, r, l)._execute();
            },
            TransformLimit: u
          };
        },
        { './eachLimit': 13, './internal/collection': 35, './internal/util': 38 }
      ],
      78: [
        function(e, t) {
          'use strict';
          function r(e) {
            return (
              o.call(this, e),
              void 0 !== this._keys || void 0 === this._coll
                ? (void 0 === this._result && (this._result = {}), (this._iterate = i))
                : (void 0 === this._result && (this._result = []), (this._iterate = l)),
              this
            );
          }
          function l() {
            const e = this._index++;
            a(_(this._iterator, this._result, this._coll[e], e), this, e);
          }
          function i() {
            const e = this._index++,
              t = this._keys[e];
            a(_(this._iterator, this._result, this._coll[t], t), this, e);
          }
          const { EachSeries: s } = e('./eachSeries'),
            { setSeries: o } = e('./internal/collection'),
            { call3: _, callProxyReciever: a, clone: c } = e('./internal/util');
          class n extends s {
            constructor(e, t, l) {
              super(e, t, r), l !== void 0 && (this._result = l);
            }
            _callResolve(e) {
              !1 === e
                ? this._promise._resolve(c(this._result))
                : 0 == --this._rest
                  ? this._promise._resolve(this._result)
                  : this._iterate();
            }
          }
          t.exports = {
            transformSeries: function(e, t, r) {
              return new n(e, t, r)._execute();
            },
            TransformSeries: n
          };
        },
        { './eachSeries': 14, './internal/collection': 35, './internal/util': 38 }
      ],
      79: [
        function(e, t) {
          'use strict';
          const { AigleWhilst: r, WhilstTester: l } = e('./whilst');
          class i extends l {
            constructor(e) {
              super(e);
            }
            _callResolve(e) {
              e ? this._proxy._promise._resolve(this._value) : this._proxy._next(this._value);
            }
          }
          t.exports = {
            until: function(e, t, l) {
              return 'function' != typeof l && ((l = t), (t = e), (e = void 0)), new r(new i(t), l)._iterate(e);
            },
            UntilTester: i
          };
        },
        { './whilst': 81 }
      ],
      80: [
        function(e, t) {
          'use strict';
          const { AigleProxy: r } = e('aigle-core'),
            l = e('./aigle'),
            { INTERNAL: i, apply: s, call1: o, callProxyReciever: _ } = e('./internal/util'),
            a = {};
          class c {
            constructor(e, t) {
              (this._promise = e), (this._handler = t);
            }
            _dispose() {
              const { _promise: e } = this;
              switch (e._resolved) {
                case 0:
                  return e.then(() => this._dispose());
                case 1:
                  return o(this._handler, this._promise._value);
              }
            }
          }
          class n extends r {
            constructor(e, t) {
              super();
              const r = e.length;
              (this._promise = new l(i)),
                (this._rest = r),
                (this._disposed = r),
                (this._array = e),
                (this._error = void 0),
                (this._result = Array(r)),
                (this._handler = t);
              for (let l = -1; ++l < r; ) {
                const t = e[l];
                !1 == t instanceof c ? _(t, this, l) : _(t._promise, this, l);
              }
            }
            _spread() {
              const { _handler: e, _result: t } = this;
              return 'function' == typeof e ? void _(s(e, t), this, i) : this._callResolve(void 0, i);
            }
            _release() {
              const { _array: e } = this;
              for (let t = e.length; t--; ) {
                const r = e[t];
                !1 == r instanceof c ? this._callResolve(r, a) : _(r._dispose(), this, a);
              }
            }
            _callResolve(e, t) {
              return t === i
                ? ((this._result = e), this._release())
                : t === a
                  ? void (
                      0 == --this._disposed &&
                      (this._error ? this._promise._reject(this._error) : this._promise._resolve(this._result))
                    )
                  : void ((this._result[t] = e), 0 == --this._rest && this._spread());
            }
            _callReject(e) {
              return this._error ? this._promise._reject(e) : void ((this._error = e), this._release());
            }
          }
          t.exports = {
            using: function() {
              let e = arguments.length;
              const t = arguments[--e],
                r = Array(e);
              for (; e--; ) r[e] = arguments[e];
              return new n(r, t)._promise;
            },
            Disposer: c
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      81: [
        function(e, t) {
          'use strict';
          const { AigleProxy: r } = e('aigle-core'),
            l = e('./aigle'),
            { INTERNAL: i, callProxyReciever: s, call1: o } = e('./internal/util');
          class _ extends r {
            constructor(e) {
              super(), (this._tester = e), (this._proxy = void 0), (this._value = void 0);
            }
            _test(e) {
              (this._value = e), s(o(this._tester, e), this, void 0);
            }
            _callResolve(e) {
              e ? this._proxy._next(this._value) : this._proxy._promise._resolve(this._value);
            }
            _callReject(e) {
              this._proxy._callReject(e);
            }
          }
          class a extends r {
            constructor(e, t) {
              super(), (this._promise = new l(i)), (this._tester = e), (this._iterator = t), (e._proxy = this);
            }
            _iterate(e) {
              return this._callResolve(e), this._promise;
            }
            _next(e) {
              s(o(this._iterator, e), this, void 0);
            }
            _callResolve(e) {
              this._tester._test(e);
            }
            _callReject(e) {
              this._promise._reject(e);
            }
          }
          t.exports = {
            whilst: function(e, t, r) {
              return 'function' != typeof r && ((r = t), (t = e), (e = void 0)), new a(new _(t), r)._iterate(e);
            },
            AigleWhilst: a,
            WhilstTester: _
          };
        },
        { './aigle': 2, './internal/util': 38, 'aigle-core': 82 }
      ],
      82: [
        function(e, t) {
          'use strict';
          t.exports = {
            AigleCore: class {
              constructor() {}
            },
            AigleProxy: class {
              constructor() {}
            }
          };
        },
        {}
      ],
      83: [
        function(e, t) {
          function r() {
            throw new Error('setTimeout has not been defined');
          }
          function l() {
            throw new Error('clearTimeout has not been defined');
          }
          function s(e) {
            if (u === setTimeout) return setTimeout(e, 0);
            if ((u === r || !u) && setTimeout) return (u = setTimeout), setTimeout(e, 0);
            try {
              return u(e, 0);
            } catch (t) {
              try {
                return u.call(null, e, 0);
              } catch (t) {
                return u.call(this, e, 0);
              }
            }
          }
          function i(e) {
            if (p === clearTimeout) return clearTimeout(e);
            if ((p === l || !p) && clearTimeout) return (p = clearTimeout), clearTimeout(e);
            try {
              return p(e);
            } catch (t) {
              try {
                return p.call(null, e);
              } catch (t) {
                return p.call(this, e);
              }
            }
          }
          function o() {
            y && h && ((y = !1), h.length ? (m = h.concat(m)) : (d = -1), m.length && _());
          }
          function _() {
            if (!y) {
              var e = s(o);
              y = !0;
              for (var t = m.length; t; ) {
                for (h = m, m = []; ++d < t; ) h && h[d].run();
                (d = -1), (t = m.length);
              }
              (h = null), (y = !1), i(e);
            }
          }
          function a(e, t) {
            (this.fun = e), (this.array = t);
          }
          function c() {}
          var n = (t.exports = {}),
            u,
            p;
          (function() {
            try {
              u = 'function' == typeof setTimeout ? setTimeout : r;
            } catch (t) {
              u = r;
            }
            try {
              p = 'function' == typeof clearTimeout ? clearTimeout : l;
            } catch (t) {
              p = l;
            }
          })();
          var m = [],
            y = !1,
            d = -1,
            h;
          (n.nextTick = function(e) {
            var t = Array(arguments.length - 1);
            if (1 < arguments.length) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
            m.push(new a(e, t)), 1 !== m.length || y || s(_);
          }),
            (a.prototype.run = function() {
              this.fun.apply(null, this.array);
            }),
            (n.title = 'browser'),
            (n.browser = !0),
            (n.env = {}),
            (n.argv = []),
            (n.version = ''),
            (n.versions = {}),
            (n.on = c),
            (n.addListener = c),
            (n.once = c),
            (n.off = c),
            (n.removeListener = c),
            (n.removeAllListeners = c),
            (n.emit = c),
            (n.prependListener = c),
            (n.prependOnceListener = c),
            (n.listeners = function() {
              return [];
            }),
            (n.binding = function() {
              throw new Error('process.binding is not supported');
            }),
            (n.cwd = function() {
              return '/';
            }),
            (n.chdir = function() {
              throw new Error('process.chdir is not supported');
            }),
            (n.umask = function() {
              return 0;
            });
        },
        {}
      ],
      84: [
        function(e) {
          (function(e, t) {
            (function(t) {
              'use strict';
              function r(e) {
                'function' != typeof e && (e = new Function('' + e));
                for (var t = Array(arguments.length - 1), r = 0; r < t.length; r++) t[r] = arguments[r + 1];
                var l = { callback: e, args: t };
                return (m[p] = l), v(p), p++;
              }
              function l(e) {
                delete m[e];
              }
              function i(e) {
                var t = e.callback,
                  r = e.args;
                switch (r.length) {
                  case 0:
                    t();
                    break;
                  case 1:
                    t(r[0]);
                    break;
                  case 2:
                    t(r[0], r[1]);
                    break;
                  case 3:
                    t(r[0], r[1], r[2]);
                    break;
                  default:
                    t.apply(void 0, r);
                }
              }
              function s(e) {
                if (y) setTimeout(s, 0, e);
                else {
                  var t = m[e];
                  if (t) {
                    y = !0;
                    try {
                      i(t);
                    } finally {
                      l(e), (y = !1);
                    }
                  }
                }
              }
              function o() {
                v = function(t) {
                  e.nextTick(function() {
                    s(t);
                  });
                };
              }
              function _() {
                if (t.postMessage && !t.importScripts) {
                  var e = !0,
                    r = t.onmessage;
                  return (
                    (t.onmessage = function() {
                      e = !1;
                    }),
                    t.postMessage('', '*'),
                    (t.onmessage = r),
                    e
                  );
                }
              }
              function a() {
                var e = 'setImmediate$' + Math.random() + '$',
                  r = function(r) {
                    r.source === t &&
                      'string' == typeof r.data &&
                      0 === r.data.indexOf(e) &&
                      s(+r.data.slice(e.length));
                  };
                t.addEventListener ? t.addEventListener('message', r, !1) : t.attachEvent('onmessage', r),
                  (v = function(r) {
                    t.postMessage(e + r, '*');
                  });
              }
              function c() {
                var e = new MessageChannel();
                (e.port1.onmessage = function(e) {
                  var t = e.data;
                  s(t);
                }),
                  (v = function(t) {
                    e.port2.postMessage(t);
                  });
              }
              function n() {
                var e = d.documentElement;
                v = function(t) {
                  var r = d.createElement('script');
                  (r.onreadystatechange = function() {
                    s(t), (r.onreadystatechange = null), e.removeChild(r), (r = null);
                  }),
                    e.appendChild(r);
                };
              }
              function u() {
                v = function(e) {
                  setTimeout(s, 0, e);
                };
              }
              if (!t.setImmediate) {
                var p = 1,
                  m = {},
                  y = !1,
                  d = t.document,
                  h = Object.getPrototypeOf && Object.getPrototypeOf(t),
                  v;
                (h = h && h.setTimeout ? h : t),
                  '[object process]' === {}.toString.call(t.process)
                    ? o()
                    : _()
                      ? a()
                      : t.MessageChannel
                        ? c()
                        : d && 'onreadystatechange' in d.createElement('script')
                          ? n()
                          : u(),
                  (h.setImmediate = r),
                  (h.clearImmediate = l);
              }
            })('undefined' == typeof self ? ('undefined' == typeof t ? this : t) : self);
          }.call(
            this,
            e('_process'),
            'undefined' == typeof global
              ? 'undefined' == typeof self
                ? 'undefined' == typeof window
                  ? {}
                  : window
                : self
              : global
          ));
        },
        { _process: 83 }
      ],
      85: [
        function(e, t) {
          t.exports =
            'function' == typeof Object.create
              ? function(e, t) {
                  (e.super_ = t),
                    (e.prototype = Object.create(t.prototype, {
                      constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 }
                    }));
                }
              : function(e, t) {
                  e.super_ = t;
                  var r = function() {};
                  (r.prototype = t.prototype), (e.prototype = new r()), (e.prototype.constructor = e);
                };
        },
        {}
      ],
      86: [
        function(e, t) {
          t.exports = function(e) {
            return (
              e &&
              'object' == typeof e &&
              'function' == typeof e.copy &&
              'function' == typeof e.fill &&
              'function' == typeof e.readUInt8
            );
          };
        },
        {}
      ],
      87: [
        function(e, t, r) {
          (function(t, l) {
            function s(e, t) {
              var l = { seen: [], stylize: o };
              return (
                3 <= arguments.length && (l.depth = arguments[2]),
                4 <= arguments.length && (l.colors = arguments[3]),
                d(t) ? (l.showHidden = t) : t && r._extend(l, t),
                x(l.showHidden) && (l.showHidden = !1),
                x(l.depth) && (l.depth = 2),
                x(l.colors) && (l.colors = !1),
                x(l.customInspect) && (l.customInspect = !0),
                l.colors && (l.stylize = i),
                a(l, e, l.depth)
              );
            }
            function i(e, t) {
              var r = s.styles[t];
              return r ? '\x1B[' + s.colors[r][0] + 'm' + e + '\x1B[' + s.colors[r][1] + 'm' : e;
            }
            function o(e) {
              return e;
            }
            function _(e) {
              var t = {};
              return (
                e.forEach(function(e) {
                  t[e] = !0;
                }),
                t
              );
            }
            function a(e, t, l) {
              if (
                e.customInspect &&
                t &&
                L(t.inspect) &&
                t.inspect !== r.inspect &&
                !(t.constructor && t.constructor.prototype === t)
              ) {
                var i = t.inspect(l, e);
                return g(i) || (i = a(e, i, l)), i;
              }
              var s = c(e, t);
              if (s) return s;
              var o = Object.keys(t),
                d = _(o);
              if (
                (e.showHidden && (o = Object.getOwnPropertyNames(t)),
                R(t) && (0 <= o.indexOf('message') || 0 <= o.indexOf('description')))
              )
                return u(t);
              if (0 === o.length) {
                if (L(t)) {
                  var h = t.name ? ': ' + t.name : '';
                  return e.stylize('[Function' + h + ']', 'special');
                }
                if (S(t)) return e.stylize(RegExp.prototype.toString.call(t), 'regexp');
                if (f(t)) return e.stylize(Date.prototype.toString.call(t), 'date');
                if (R(t)) return u(t);
              }
              var v = '',
                x = !1,
                k = ['{', '}'];
              if ((y(t) && ((x = !0), (k = ['[', ']'])), L(t))) {
                var j = t.name ? ': ' + t.name : '';
                v = ' [Function' + j + ']';
              }
              if (
                (S(t) && (v = ' ' + RegExp.prototype.toString.call(t)),
                f(t) && (v = ' ' + Date.prototype.toUTCString.call(t)),
                R(t) && (v = ' ' + u(t)),
                0 === o.length && (!x || 0 == t.length))
              )
                return k[0] + v + k[1];
              if (0 > l)
                return S(t) ? e.stylize(RegExp.prototype.toString.call(t), 'regexp') : e.stylize('[Object]', 'special');
              e.seen.push(t);
              var E;
              return (
                (E = x
                  ? p(e, t, l, d, o)
                  : o.map(function(r) {
                      return n(e, t, l, d, r, x);
                    })),
                e.seen.pop(),
                m(E, v, k)
              );
            }
            function c(e, t) {
              if (x(t)) return e.stylize('undefined', 'undefined');
              if (g(t)) {
                var r =
                  "'" +
                  JSON.stringify(t)
                    .replace(/^"|"$/g, '')
                    .replace(/'/g, "\\'")
                    .replace(/\\"/g, '"') +
                  "'";
                return e.stylize(r, 'string');
              }
              return v(t)
                ? e.stylize('' + t, 'number')
                : d(t)
                  ? e.stylize('' + t, 'boolean')
                  : h(t)
                    ? e.stylize('null', 'null')
                    : void 0;
            }
            function u(e) {
              return '[' + Error.prototype.toString.call(e) + ']';
            }
            function p(e, t, r, s, o) {
              for (var _ = [], a = 0, i = t.length; a < i; ++a)
                b(t, a + '') ? _.push(n(e, t, r, s, a + '', !0)) : _.push('');
              return (
                o.forEach(function(l) {
                  l.match(/^\d+$/) || _.push(n(e, t, r, s, l, !0));
                }),
                _
              );
            }
            function n(e, t, r, l, i, s) {
              var o, _, c;
              if (
                ((c = Object.getOwnPropertyDescriptor(t, i) || { value: t[i] }),
                c.get
                  ? c.set
                    ? (_ = e.stylize('[Getter/Setter]', 'special'))
                    : (_ = e.stylize('[Getter]', 'special'))
                  : c.set && (_ = e.stylize('[Setter]', 'special')),
                b(l, i) || (o = '[' + i + ']'),
                _ ||
                  (0 > e.seen.indexOf(c.value)
                    ? ((_ = h(r) ? a(e, c.value, null) : a(e, c.value, r - 1)),
                      -1 < _.indexOf('\n') &&
                        (s
                          ? (_ = _.split('\n')
                              .map(function(e) {
                                return '  ' + e;
                              })
                              .join('\n')
                              .substr(2))
                          : (_ =
                              '\n' +
                              _.split('\n')
                                .map(function(e) {
                                  return '   ' + e;
                                })
                                .join('\n'))))
                    : (_ = e.stylize('[Circular]', 'special'))),
                x(o))
              ) {
                if (s && i.match(/^\d+$/)) return _;
                (o = JSON.stringify('' + i)),
                  o.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)
                    ? ((o = o.substr(1, o.length - 2)), (o = e.stylize(o, 'name')))
                    : ((o = o
                        .replace(/'/g, "\\'")
                        .replace(/\\"/g, '"')
                        .replace(/(^"|"$)/g, "'")),
                      (o = e.stylize(o, 'string')));
              }
              return o + ': ' + _;
            }
            function m(e, t, r) {
              var l = 0,
                i = e.reduce(function(e, t) {
                  return l++, 0 <= t.indexOf('\n') && l++, e + t.replace(/\u001b\[\d\d?m/g, '').length + 1;
                }, 0);
              return 60 < i
                ? r[0] + ('' === t ? '' : t + '\n ') + ' ' + e.join(',\n  ') + ' ' + r[1]
                : r[0] + t + ' ' + e.join(', ') + ' ' + r[1];
            }
            function y(e) {
              return Array.isArray(e);
            }
            function d(e) {
              return 'boolean' == typeof e;
            }
            function h(e) {
              return null === e;
            }
            function v(e) {
              return 'number' == typeof e;
            }
            function g(e) {
              return 'string' == typeof e;
            }
            function x(e) {
              return void 0 === e;
            }
            function S(e) {
              return k(e) && '[object RegExp]' === j(e);
            }
            function k(e) {
              return 'object' == typeof e && null !== e;
            }
            function f(e) {
              return k(e) && '[object Date]' === j(e);
            }
            function R(t) {
              return k(t) && ('[object Error]' === j(t) || t instanceof Error);
            }
            function L(e) {
              return 'function' == typeof e;
            }
            function j(e) {
              return Object.prototype.toString.call(e);
            }
            function E(e) {
              return 10 > e ? '0' + e.toString(10) : e.toString(10);
            }
            function A() {
              var e = new Date(),
                t = [E(e.getHours()), E(e.getMinutes()), E(e.getSeconds())].join(':');
              return [e.getDate(), I[e.getMonth()], t].join(' ');
            }
            function b(e, t) {
              return Object.prototype.hasOwnProperty.call(e, t);
            }
            var N = /%[sdj%]/g;
            (r.format = function(e) {
              if (!g(e)) {
                for (var t = [], r = 0; r < arguments.length; r++) t.push(s(arguments[r]));
                return t.join(' ');
              }
              for (
                var r = 1,
                  l = arguments,
                  i = l.length,
                  o = (e + '').replace(N, function(e) {
                    if ('%%' === e) return '%';
                    if (r >= i) return e;
                    switch (e) {
                      case '%s':
                        return l[r++] + '';
                      case '%d':
                        return +l[r++];
                      case '%j':
                        try {
                          return JSON.stringify(l[r++]);
                        } catch (e) {
                          return '[Circular]';
                        }
                      default:
                        return e;
                    }
                  }),
                  _ = l[r];
                r < i;
                _ = l[++r]
              )
                o += h(_) || !k(_) ? ' ' + _ : ' ' + s(_);
              return o;
            }),
              (r.deprecate = function(e, i) {
                if (x(l.process))
                  return function() {
                    return r.deprecate(e, i).apply(this, arguments);
                  };
                if (!0 === t.noDeprecation) return e;
                var s = !1;
                return function() {
                  if (!s) {
                    if (t.throwDeprecation) throw new Error(i);
                    else t.traceDeprecation ? console.trace(i) : console.error(i);
                    s = !0;
                  }
                  return e.apply(this, arguments);
                };
              });
            var P = {},
              B;
            (r.debuglog = function(e) {
              if ((x(B) && (B = t.env.NODE_DEBUG || ''), (e = e.toUpperCase()), !P[e]))
                if (new RegExp('\\b' + e + '\\b', 'i').test(B)) {
                  var l = t.pid;
                  P[e] = function() {
                    var t = r.format.apply(r, arguments);
                    console.error('%s %d: %s', e, l, t);
                  };
                } else P[e] = function() {};
              return P[e];
            }),
              (r.inspect = s),
              (s.colors = {
                bold: [1, 22],
                italic: [3, 23],
                underline: [4, 24],
                inverse: [7, 27],
                white: [37, 39],
                grey: [90, 39],
                black: [30, 39],
                blue: [34, 39],
                cyan: [36, 39],
                green: [32, 39],
                magenta: [35, 39],
                red: [31, 39],
                yellow: [33, 39]
              }),
              (s.styles = {
                special: 'cyan',
                number: 'yellow',
                boolean: 'yellow',
                undefined: 'grey',
                null: 'bold',
                string: 'green',
                date: 'magenta',
                regexp: 'red'
              }),
              (r.isArray = y),
              (r.isBoolean = d),
              (r.isNull = h),
              (r.isNullOrUndefined = function(e) {
                return null == e;
              }),
              (r.isNumber = v),
              (r.isString = g),
              (r.isSymbol = function(e) {
                return 'symbol' == typeof e;
              }),
              (r.isUndefined = x),
              (r.isRegExp = S),
              (r.isObject = k),
              (r.isDate = f),
              (r.isError = R),
              (r.isFunction = L),
              (r.isPrimitive = function(e) {
                return (
                  null === e ||
                  'boolean' == typeof e ||
                  'number' == typeof e ||
                  'string' == typeof e ||
                  'symbol' == typeof e ||
                  'undefined' == typeof e
                );
              }),
              (r.isBuffer = e('./support/isBuffer'));
            var I = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            (r.log = function() {
              console.log('%s - %s', A(), r.format.apply(r, arguments));
            }),
              (r.inherits = e('inherits')),
              (r._extend = function(e, t) {
                if (!t || !k(t)) return e;
                for (var r = Object.keys(t), l = r.length; l--; ) e[r[l]] = t[r[l]];
                return e;
              });
          }.call(
            this,
            e('_process'),
            'undefined' == typeof global
              ? 'undefined' == typeof self
                ? 'undefined' == typeof window
                  ? {}
                  : window
                : self
              : global
          ));
        },
        { './support/isBuffer': 86, _process: 83, inherits: 85 }
      ],
      88: [
        function(e, t) {
          t.exports = {
            name: 'aigle',
            version: '1.13.0-alpha.4',
            description: 'Aigle is an ideal Promise library, faster and more functional than other Promise libraries',
            main: 'index.js',
            typings: 'aigle.d.ts',
            private: !0,
            browser: 'browser.js',
            scripts: {
              bench: 'node --expose_gc ./benchmark -d',
              eslint: 'eslint . --ext .js',
              test: 'DELAY=50 npm-run-all -p eslint test:type test:cov',
              'test:mocha': 'mocha test/**/*.js',
              'test:cov': 'nyc npm run test:mocha',
              'test:type': 'cd typings && tsc',
              codecov: 'nyc report --reporter=lcovonly && codecov',
              prettier:
                "prettier --write './benchmark/**/*.js' './gulp/**/*.js' './lib/**/*.js' './test/**/*.js' './typings/**/*.ts'",
              precommit: 'lint-staged'
            },
            homepage: 'https://github.com/suguru03/aigle',
            keywords: ['aigle', 'promise', 'async'],
            files: ['README.md', 'index.js', 'lib/', 'browser.js', 'dist/'],
            author: 'Suguru Motegi',
            license: 'MIT',
            devDependencies: {
              babili: '0.1.4',
              benchmark: '^2.1.1',
              bluebird: '^3.5.1',
              browserify: '^16.0.0',
              buble: '^0.19.0',
              codecov: '^3.0.0',
              docdash: '^0.4.0',
              eslint: '^5.0.0',
              gulp: '^3.9.1',
              'gulp-bump': '^3.0.0',
              'gulp-git': '^2.4.2',
              'gulp-tag-version': '^1.3.0',
              husky: '^0.14.3',
              jsdoc: '^3.5.5',
              'lint-staged': '^7.0.0',
              lodash: '^4.15.0',
              minimist: '^1.2.0',
              mocha: '^5.0.0',
              'mocha.parallel': '0.15.5',
              'neo-async': '^2.5.0',
              'npm-run-all': '^4.1.2',
              nyc: '^12.0.1',
              prettier: '^1.11.1',
              'require-dir': '^1.0.0',
              'run-sequence': '^2.0.0',
              semver: '^5.5.0',
              setimmediate: '^1.0.5',
              tslint: '^5.9.1',
              typescript: '^2.7.2',
              'uglify-js': '^3.1.5'
            },
            dependencies: { 'aigle-core': '^1.0.0' },
            'lint-staged': { '*.{js,ts}': ['prettier --write', 'git add'] },
            prettier: { printWidth: 120, singleQuote: !0 }
          };
        },
        {}
      ]
    },
    {},
    [1]
  )(1);
});
